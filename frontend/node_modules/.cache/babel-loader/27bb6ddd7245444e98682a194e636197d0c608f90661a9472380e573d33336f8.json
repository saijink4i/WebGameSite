{"ast":null,"code":"var _jsxFileName = \"F:\\\\Workspace\\\\Cursor\\\\game\\\\frontend\\\\src\\\\components\\\\games\\\\ZombieDice.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport redBrain from '../../assets/zombie-dice/faces/red-brain.png';\nimport redFootsteps from '../../assets/zombie-dice/faces/red-footsteps.png';\nimport redShotgun from '../../assets/zombie-dice/faces/red-shotgun.png';\nimport yellowBrain from '../../assets/zombie-dice/faces/yellow-brain.png';\nimport yellowFootsteps from '../../assets/zombie-dice/faces/yellow-footsteps.png';\nimport yellowShotgun from '../../assets/zombie-dice/faces/yellow-shotgun.png';\nimport greenBrain from '../../assets/zombie-dice/faces/green-brain.png';\nimport greenFootsteps from '../../assets/zombie-dice/faces/green-footsteps.png';\nimport greenShotgun from '../../assets/zombie-dice/faces/green-shotgun.png';\nimport '../styles/ZombieDice.css';\n\n// 승리 점수\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WINNING_SCORE = 13;\n\n// 주사위 면 정의\nconst DICE_FACES = {\n  RED: {\n    faces: [{\n      image: redBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: redFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 2면\n    {\n      image: redFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 3면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    },\n    // 4면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    },\n    // 5면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  },\n  YELLOW: {\n    faces: [{\n      image: yellowBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: yellowBrain,\n      type: 'BRAIN'\n    },\n    // 2면\n    {\n      image: yellowFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 3면\n    {\n      image: yellowFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 4면\n    {\n      image: yellowShotgun,\n      type: 'SHOTGUN'\n    },\n    // 5면\n    {\n      image: yellowShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  },\n  GREEN: {\n    faces: [{\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 2면\n    {\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 3면\n    {\n      image: greenFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 4면\n    {\n      image: greenFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 5면\n    {\n      image: greenShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  }\n};\n\n// Dice 컴포넌트 수정 - 이미지 기반 3D 주사위\nconst Dice = ({\n  type,\n  result,\n  isRolling\n}) => {\n  _s();\n  const diceRef = useRef(null);\n  useEffect(() => {\n    if (!diceRef.current) return;\n\n    // Three.js 설정\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(100, 100);\n    diceRef.current.innerHTML = '';\n    diceRef.current.appendChild(renderer.domElement);\n\n    // 조명 설정\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // 주사위 색상 설정\n    let diceColor;\n    if (type === 'RED') diceColor = 0xff0000;else if (type === 'YELLOW') diceColor = 0xffff00;else if (type === 'GREEN') diceColor = 0x00ff00;else diceColor = 0xffffff;\n\n    // 텍스처 로드 함수\n    const loadTexture = imagePath => {\n      const texture = new THREE.TextureLoader().load(imagePath);\n      texture.minFilter = THREE.LinearFilter;\n      return texture;\n    };\n\n    // 주사위 면 텍스처 설정\n    let brainTexture, shotgunTexture, footstepsTexture;\n    if (type === 'RED') {\n      brainTexture = loadTexture(redBrain);\n      shotgunTexture = loadTexture(redShotgun);\n      footstepsTexture = loadTexture(redFootsteps);\n    } else if (type === 'YELLOW') {\n      brainTexture = loadTexture(yellowBrain);\n      shotgunTexture = loadTexture(yellowShotgun);\n      footstepsTexture = loadTexture(yellowFootsteps);\n    } else if (type === 'GREEN') {\n      brainTexture = loadTexture(greenBrain);\n      shotgunTexture = loadTexture(greenShotgun);\n      footstepsTexture = loadTexture(greenFootsteps);\n    }\n\n    // 주사위 면 재질 생성\n    const materials = [new THREE.MeshStandardMaterial({\n      map: brainTexture,\n      color: 0xffffff\n    }),\n    // 오른쪽 - 뇌\n    new THREE.MeshStandardMaterial({\n      map: shotgunTexture,\n      color: 0xffffff\n    }),\n    // 왼쪽 - 총\n    new THREE.MeshStandardMaterial({\n      map: footstepsTexture,\n      color: 0xffffff\n    }),\n    // 위 - 발자국\n    new THREE.MeshStandardMaterial({\n      map: brainTexture,\n      color: 0xffffff\n    }),\n    // 아래 - 뇌\n    new THREE.MeshStandardMaterial({\n      map: shotgunTexture,\n      color: 0xffffff\n    }),\n    // 앞 - 총\n    new THREE.MeshStandardMaterial({\n      map: footstepsTexture,\n      color: 0xffffff\n    }) // 뒤 - 발자국\n    ];\n\n    // 주사위 생성\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const cube = new THREE.Mesh(geometry, materials);\n    scene.add(cube);\n\n    // 주사위 위치 조정\n    camera.position.z = 2;\n\n    // 애니메이션 설정\n    let targetRotationX = 0;\n    let targetRotationY = 0;\n    let targetRotationZ = 0;\n\n    // 결과에 따라 주사위 회전 설정\n    if (result === 'BRAIN') {\n      // 뇌가 보이도록 회전\n      targetRotationX = 0;\n      targetRotationY = 0;\n    } else if (result === 'SHOTGUN') {\n      // 총이 보이도록 회전\n      targetRotationX = 0;\n      targetRotationY = Math.PI / 2;\n    } else if (result === 'FOOTSTEPS') {\n      // 발자국이 보이도록 회전\n      targetRotationX = Math.PI / 2;\n      targetRotationY = 0;\n    }\n\n    // 초기 랜덤 회전 설정 (굴리는 효과)\n    if (isRolling) {\n      cube.rotation.x = Math.random() * Math.PI * 2;\n      cube.rotation.y = Math.random() * Math.PI * 2;\n      cube.rotation.z = Math.random() * Math.PI * 2;\n    }\n\n    // 애니메이션 함수\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (isRolling) {\n        // 굴리는 애니메이션\n        cube.rotation.x += 0.1;\n        cube.rotation.y += 0.15;\n        cube.rotation.z += 0.05;\n      } else {\n        // 결과 표시 애니메이션 - 부드럽게 회전\n        cube.rotation.x += (targetRotationX - cube.rotation.x) * 0.1;\n        cube.rotation.y += (targetRotationY - cube.rotation.y) * 0.1;\n        cube.rotation.z += (targetRotationZ - cube.rotation.z) * 0.1;\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 클린업\n    return () => {\n      if (diceRef.current) {\n        diceRef.current.innerHTML = '';\n      }\n      renderer.dispose();\n      geometry.dispose();\n      materials.forEach(material => {\n        if (material.map) material.map.dispose();\n        material.dispose();\n      });\n    };\n  }, [type, result, isRolling]);\n  const getDiceColor = () => {\n    if (type === 'RED') return 'red-dice';\n    if (type === 'YELLOW') return 'yellow-dice';\n    if (type === 'GREEN') return 'green-dice';\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `dice ${getDiceColor()} ${isRolling ? 'rolling-container' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: diceRef,\n      className: \"dice-3d-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(Dice, \"4sv3ss9FlwXVOpSPKGjjC19CS4M=\");\n_c = Dice;\nfunction ZombieDice({\n  players,\n  currentTurn,\n  onTurnEnd,\n  isMyTurn\n}) {\n  _s2();\n  const [dicePool, setDicePool] = useState([]);\n  const [selectedDice, setSelectedDice] = useState([]);\n  const [rolledResults, setRolledResults] = useState([]);\n  const [currentBrains, setCurrentBrains] = useState(0);\n  const [currentShotguns, setCurrentShotguns] = useState(0);\n  const [isRolling, setIsRolling] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const diceContainerRef = useRef(null);\n\n  // 주사위 선택 요청\n  const handleSelectDice = () => {\n    console.log('주사위 선택 요청');\n    if (window.socket) {\n      const roomId = window.location.pathname.split('/')[2];\n      window.socket.emit('gameAction', {\n        action: 'rollDice',\n        selectDice: true,\n        roomId\n      });\n    } else {\n      console.error('소켓 연결이 없습니다!');\n    }\n  };\n\n  // 주사위 굴리기 요청\n  const handleRoll = () => {\n    console.log('주사위 굴리기 요청');\n\n    // 선택된 주사위가 없으면 먼저 선택\n    if (!selectedDice || selectedDice.length === 0) {\n      console.log('선택된 주사위 없음, 주사위 선택 요청');\n      handleSelectDice();\n      return;\n    }\n    console.log('선택된 주사위로 굴리기 요청:', selectedDice);\n\n    // 주사위 굴리기 요청\n    if (window.socket) {\n      const roomId = window.location.pathname.split('/')[2];\n      window.socket.emit('gameAction', {\n        action: 'rollDice',\n        roomId\n      });\n      setIsRolling(true);\n    } else {\n      console.error('소켓 연결이 없습니다!');\n    }\n  };\n\n  // 턴 종료 요청\n  const handleStop = () => {\n    // 샷건이 3개 이상이면 점수 0으로 처리\n    const finalScore = currentShotguns >= 3 ? 0 : currentBrains;\n    if (window.socket) {\n      const roomId = window.location.pathname.split('/')[2];\n      window.socket.emit('endTurn', {\n        roomId,\n        score: finalScore\n      });\n    } else {\n      console.error('소켓 연결이 없습니다!');\n    }\n\n    // 로컬 콜백 호출\n    onTurnEnd(finalScore);\n  };\n\n  // 계속하기 요청\n  const handleContinue = () => {\n    // 도망간 주사위 찾기\n    const footstepsDice = rolledResults.filter(result => result.result === 'FOOTSTEPS').map(result => result.type);\n    if (window.socket) {\n      const roomId = window.location.pathname.split('/')[2];\n      window.socket.emit('continueTurn', {\n        roomId,\n        footstepsDice\n      });\n\n      // 이전 결과에서 도망이 아닌 주사위만 유지\n      const nonFootstepsResults = rolledResults.filter(result => result.result !== 'FOOTSTEPS');\n      setRolledResults(nonFootstepsResults);\n    } else {\n      console.error('소켓 연결이 없습니다!');\n    }\n  };\n\n  // 소켓 이벤트 리스너\n  useEffect(() => {\n    if (window.socket) {\n      console.log('소켓 이벤트 리스너 등록');\n\n      // 게임 시작 이벤트\n      const handleGameStarted = data => {\n        console.log('게임 시작:', data);\n\n        // 서버에서 받은 게임 상태로 초기화\n        if (data.gameState) {\n          console.log('게임 상태 초기화:', data.gameState);\n\n          // 주사위 풀 초기화\n          if (data.gameState.dicePool && data.gameState.dicePool.length > 0) {\n            setDicePool(data.gameState.dicePool);\n          } else {\n            console.warn('주사위 풀이 없거나 비어있습니다. 초기화합니다.');\n            // 주사위 풀 초기화\n            const initialDicePool = [...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')];\n\n            // 서버에 주사위 풀 초기화 알림\n            const roomId = window.location.pathname.split('/')[2];\n            window.socket.emit('updateDicePool', {\n              roomId,\n              dicePool: initialDicePool\n            });\n            setDicePool(initialDicePool);\n          }\n          setCurrentBrains(0);\n          setCurrentShotguns(0);\n          setRolledResults([]);\n          setSelectedDice([]);\n          setWinner(null);\n        } else {\n          // 게임 상태가 없는 경우 기본값으로 초기화\n          console.warn('게임 상태가 없습니다. 기본값으로 초기화합니다.');\n          const initialDicePool = [...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')];\n\n          // 서버에 주사위 풀 초기화 알림\n          const roomId = window.location.pathname.split('/')[2];\n          window.socket.emit('updateDicePool', {\n            roomId,\n            dicePool: initialDicePool\n          });\n          setDicePool(initialDicePool);\n          setCurrentBrains(0);\n          setCurrentShotguns(0);\n          setRolledResults([]);\n          setSelectedDice([]);\n          setWinner(null);\n        }\n      };\n\n      // 주사위 선택 이벤트\n      const handleDiceSelected = data => {\n        console.log('주사위 선택됨:', data);\n        setSelectedDice(data.selectedDice || []);\n        setDicePool(data.dicePool || []);\n\n        // 주사위가 선택되면 자동으로 굴리기 요청\n        if (data.selectedDice && data.selectedDice.length > 0 && isMyTurn) {\n          console.log('주사위 선택 후 자동으로 굴리기 요청');\n\n          // 약간의 딜레이 후 굴리기 요청 (UI 업데이트를 위해)\n          setTimeout(() => {\n            const roomId = window.location.pathname.split('/')[2];\n            window.socket.emit('gameAction', {\n              action: 'rollDice',\n              roomId\n            });\n            setIsRolling(true);\n          }, 100);\n        }\n      };\n\n      // 주사위 굴리기 결과 이벤트\n      const handleGameAction = data => {\n        console.log('게임 액션 수신:', data);\n        if (data.action === 'rollDice') {\n          console.log('주사위 결과 수신:', data.results);\n\n          // 결과 표시\n          setRolledResults(data.results);\n          setIsRolling(true);\n\n          // 주사위 풀 업데이트\n          setDicePool(data.dicePool || []);\n\n          // 애니메이션 후 결과 처리\n          setTimeout(() => {\n            // 내 턴일 때만 결과 처리\n            if (isMyTurn) {\n              // 결과 처리 - 뇌와 샷건 개수 누적\n              let newBrains = currentBrains;\n              let newShotguns = currentShotguns;\n              data.results.forEach(({\n                result\n              }) => {\n                if (result === 'BRAIN') newBrains++;\n                if (result === 'SHOTGUN') newShotguns++;\n              });\n\n              // 상태 업데이트\n              setCurrentBrains(newBrains);\n              setCurrentShotguns(newShotguns);\n\n              // 현재 상태를 서버에 전송\n              window.socket.emit('updateTurnStatus', {\n                roomId: window.location.pathname.split('/')[2],\n                currentBrains: newBrains,\n                currentShotguns: newShotguns\n              });\n            }\n            setIsRolling(false);\n          }, 2500);\n        }\n      };\n\n      // 턴 상태 업데이트 이벤트\n      const handleTurnStatusUpdated = data => {\n        console.log('턴 상태 업데이트:', data);\n\n        // 내 턴이 아닐 때만 상태 업데이트\n        if (!isMyTurn) {\n          setCurrentBrains(data.currentBrains);\n          setCurrentShotguns(data.currentShotguns);\n        }\n\n        // 주사위 풀 업데이트\n        setDicePool(data.dicePool || []);\n      };\n\n      // 게임 상태 업데이트 이벤트\n      const handleGameStateUpdated = gameState => {\n        console.log('게임 상태 업데이트:', gameState);\n\n        // 현재 턴이 변경되었는지 확인\n        const isMyTurnChanged = gameState.currentTurn !== currentTurn;\n        if (isMyTurnChanged) {\n          console.log('턴 변경 감지, 주사위 풀 초기화');\n\n          // 주사위 풀 초기화 - 서버에서 받은 값 사용 또는 기본값으로 초기화\n          const initialDicePool = gameState.dicePool || [...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')];\n\n          // 서버에 주사위 풀 초기화 알림\n          const roomId = window.location.pathname.split('/')[2];\n          window.socket.emit('updateDicePool', {\n            roomId,\n            dicePool: initialDicePool\n          });\n          setDicePool(initialDicePool);\n          setCurrentBrains(0);\n          setCurrentShotguns(0);\n          setRolledResults([]);\n          setSelectedDice([]);\n        } else {\n          // 주사위 풀 업데이트 - 서버 상태로 동기화\n          if (gameState.dicePool) {\n            console.log('주사위 풀 업데이트:', gameState.dicePool);\n            setDicePool(gameState.dicePool);\n          }\n        }\n\n        // 현재 턴 업데이트\n        if (gameState.currentTurn !== undefined) {\n          // 턴이 변경되었으면 상태 초기화\n          setCurrentBrains(gameState.currentBrains || 0);\n          setCurrentShotguns(gameState.currentShotguns || 0);\n        }\n      };\n\n      // 게임 종료 이벤트\n      const handleGameEnded = data => {\n        console.log('게임 종료:', data);\n        setWinner(data.winner);\n      };\n\n      // 게임 에러 이벤트\n      const handleGameError = data => {\n        console.error('게임 에러:', data.message);\n\n        // 에러 처리\n        alert(`게임 에러: ${data.message}`);\n      };\n\n      // 이벤트 리스너 등록\n      window.socket.on('gameStarted', handleGameStarted);\n      window.socket.on('diceSelected', handleDiceSelected);\n      window.socket.on('gameAction', handleGameAction);\n      window.socket.on('turnStatusUpdated', handleTurnStatusUpdated);\n      window.socket.on('gameStateUpdated', handleGameStateUpdated);\n      window.socket.on('gameEnded', handleGameEnded);\n      window.socket.on('gameError', handleGameError);\n\n      // 클린업\n      return () => {\n        console.log('소켓 이벤트 리스너 제거');\n        window.socket.off('gameStarted', handleGameStarted);\n        window.socket.off('diceSelected', handleDiceSelected);\n        window.socket.off('gameAction', handleGameAction);\n        window.socket.off('turnStatusUpdated', handleTurnStatusUpdated);\n        window.socket.off('gameStateUpdated', handleGameStateUpdated);\n        window.socket.off('gameEnded', handleGameEnded);\n        window.socket.off('gameError', handleGameError);\n      };\n    }\n  }, [currentBrains, currentShotguns, isMyTurn, onTurnEnd]);\n\n  // 주사위 풀 상태 표시 컴포넌트\n  const DicePoolStatus = ({\n    dicePool\n  }) => {\n    // 주사위 풀이 없으면 초기화\n    const pool = Array.isArray(dicePool) ? dicePool : [];\n\n    // 주사위 색상별 개수 계산\n    const redCount = pool.filter(dice => dice === 'RED').length;\n    const yellowCount = pool.filter(dice => dice === 'YELLOW').length;\n    const greenCount = pool.filter(dice => dice === 'GREEN').length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-pool-status mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"\\uB0A8\\uC740 \\uC8FC\\uC0AC\\uC704:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-pool-counts\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-count red\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dice-color-indicator red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 13\n          }, this), \"\\uBE68\\uAC04\\uC0C9: \", redCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-count yellow\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dice-color-indicator yellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 13\n          }, this), \"\\uB178\\uB780\\uC0C9: \", yellowCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-count green\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dice-color-indicator green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this), \"\\uCD08\\uB85D\\uC0C9: \", greenCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 점수판 렌더링\n  const renderScoreBoard = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-board mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-center mb-3\",\n        children: \"\\uC810\\uC218\\uD310\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `col-md-${12 / players.length} mb-2`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card ${index === currentTurn ? 'bg-light' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-title\",\n                children: player.nickname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"\\uC810\\uC218: \", player.score || 0]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 다른 플레이어의 턴일 때 화면\n  if (!isMyTurn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"zombie-dice\",\n      children: [renderScoreBoard(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [players[currentTurn].nickname, \"\\uB2D8\\uC758 \\uCC28\\uB840\\uC785\\uB2C8\\uB2E4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-status mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-around\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uD68D\\uB4DD\\uD55C \\uB1CC: \", currentBrains]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uC0F7\\uAC74 \\uD69F\\uC218: \", currentShotguns, \"/3\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-area mb-3\",\n        children: isRolling ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uC8FC\\uC0AC\\uC704 \\uAD74\\uB9AC\\uB294 \\uC911...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }, this) : rolledResults.length > 0 && rolledResults.map((result, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          type: result.type,\n          result: result.result,\n          isRolling: isRolling\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DicePoolStatus, {\n        dicePool: dicePool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 내 턴일 때 화면\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"zombie-dice\",\n    children: [renderScoreBoard(), winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uD83C\\uDFC6 \", winner.nickname, \"\\uB2D8\\uC774 \\uC2B9\\uB9AC\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4! \\uD83C\\uDFC6\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"my-turn-indicator\",\n          children: \"\\uB2F9\\uC2E0\\uC758 \\uCC28\\uB840\\uC785\\uB2C8\\uB2E4!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-status mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-around\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uD68D\\uB4DD\\uD55C \\uB1CC: \", currentBrains]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uC0F7\\uAC74 \\uD69F\\uC218: \", currentShotguns, \"/3\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-area mb-3\",\n        children: isRolling ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uC8FC\\uC0AC\\uC704 \\uAD74\\uB9AC\\uB294 \\uC911...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 15\n        }, this) : rolledResults.length > 0 ? rolledResults.map((result, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          type: result.type,\n          result: result.result,\n          isRolling: isRolling\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 19\n        }, this)) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleRoll,\n          disabled: isRolling,\n          children: selectedDice.length === 0 ? \"주사위 선택\" : \"주사위 굴리기\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 11\n      }, this), rolledResults.length > 0 && !winner && !isRolling && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success me-2\",\n          onClick: handleContinue,\n          disabled: currentShotguns >= 3,\n          children: \"\\uACC4\\uC18D\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-warning\",\n          onClick: handleStop,\n          children: currentShotguns >= 3 ? \"턴 종료 (0점)\" : \"멈추기\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 13\n      }, this), currentShotguns >= 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uCD1D\\uC774 3\\uAC1C \\uC774\\uC0C1!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 15\n        }, this), \" \\uC774\\uBC88 \\uD134\\uC5D0 \\uD68D\\uB4DD\\uD55C \\uB1CC\\uB97C \\uBAA8\\uB450 \\uC783\\uC5C8\\uC2B5\\uB2C8\\uB2E4. \\uD134\\uC744 \\uC885\\uB8CC\\uD574\\uC8FC\\uC138\\uC694.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DicePoolStatus, {\n        dicePool: dicePool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 623,\n    columnNumber: 5\n  }, this);\n}\n_s2(ZombieDice, \"jXHRXhASj26bUfojBERxCWlONeA=\");\n_c2 = ZombieDice;\nexport default ZombieDice;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dice\");\n$RefreshReg$(_c2, \"ZombieDice\");","map":{"version":3,"names":["useState","useEffect","useRef","THREE","GLTFLoader","redBrain","redFootsteps","redShotgun","yellowBrain","yellowFootsteps","yellowShotgun","greenBrain","greenFootsteps","greenShotgun","jsxDEV","_jsxDEV","Fragment","_Fragment","WINNING_SCORE","DICE_FACES","RED","faces","image","type","YELLOW","GREEN","Dice","result","isRolling","_s","diceRef","current","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","alpha","setSize","innerHTML","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","position","set","diceColor","loadTexture","imagePath","texture","TextureLoader","load","minFilter","LinearFilter","brainTexture","shotgunTexture","footstepsTexture","materials","MeshStandardMaterial","map","color","geometry","BoxGeometry","cube","Mesh","z","targetRotationX","targetRotationY","targetRotationZ","Math","PI","rotation","x","random","y","animate","requestAnimationFrame","render","dispose","forEach","material","getDiceColor","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","ZombieDice","players","currentTurn","onTurnEnd","isMyTurn","_s2","dicePool","setDicePool","selectedDice","setSelectedDice","rolledResults","setRolledResults","currentBrains","setCurrentBrains","currentShotguns","setCurrentShotguns","setIsRolling","winner","setWinner","diceContainerRef","handleSelectDice","console","log","window","socket","roomId","location","pathname","split","emit","action","selectDice","error","handleRoll","length","handleStop","finalScore","score","handleContinue","footstepsDice","filter","nonFootstepsResults","handleGameStarted","data","gameState","warn","initialDicePool","Array","fill","handleDiceSelected","setTimeout","handleGameAction","results","newBrains","newShotguns","handleTurnStatusUpdated","handleGameStateUpdated","isMyTurnChanged","undefined","handleGameEnded","handleGameError","message","alert","on","off","DicePoolStatus","pool","isArray","redCount","dice","yellowCount","greenCount","renderScoreBoard","player","index","nickname","onClick","disabled","_c2","$RefreshReg$"],"sources":["F:/Workspace/Cursor/game/frontend/src/components/games/ZombieDice.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport redBrain from '../../assets/zombie-dice/faces/red-brain.png';\r\nimport redFootsteps from '../../assets/zombie-dice/faces/red-footsteps.png';\r\nimport redShotgun from '../../assets/zombie-dice/faces/red-shotgun.png';\r\nimport yellowBrain from '../../assets/zombie-dice/faces/yellow-brain.png';\r\nimport yellowFootsteps from '../../assets/zombie-dice/faces/yellow-footsteps.png';\r\nimport yellowShotgun from '../../assets/zombie-dice/faces/yellow-shotgun.png';\r\nimport greenBrain from '../../assets/zombie-dice/faces/green-brain.png';\r\nimport greenFootsteps from '../../assets/zombie-dice/faces/green-footsteps.png';\r\nimport greenShotgun from '../../assets/zombie-dice/faces/green-shotgun.png';\r\nimport '../styles/ZombieDice.css';\r\n\r\n// 승리 점수\r\nconst WINNING_SCORE = 13;\r\n\r\n// 주사위 면 정의\r\nconst DICE_FACES = {\r\n  RED: {\r\n    faces: [\r\n      { image: redBrain, type: 'BRAIN' },      // 1면\r\n      { image: redFootsteps, type: 'FOOTSTEPS' }, // 2면\r\n      { image: redFootsteps, type: 'FOOTSTEPS' }, // 3면\r\n      { image: redShotgun, type: 'SHOTGUN' },   // 4면\r\n      { image: redShotgun, type: 'SHOTGUN' },   // 5면\r\n      { image: redShotgun, type: 'SHOTGUN' }    // 6면\r\n    ]\r\n  },\r\n  YELLOW: {\r\n    faces: [\r\n      { image: yellowBrain, type: 'BRAIN' },     // 1면\r\n      { image: yellowBrain, type: 'BRAIN' },     // 2면\r\n      { image: yellowFootsteps, type: 'FOOTSTEPS' }, // 3면\r\n      { image: yellowFootsteps, type: 'FOOTSTEPS' }, // 4면\r\n      { image: yellowShotgun, type: 'SHOTGUN' },  // 5면\r\n      { image: yellowShotgun, type: 'SHOTGUN' }   // 6면\r\n    ]\r\n  },\r\n  GREEN: {\r\n    faces: [\r\n      { image: greenBrain, type: 'BRAIN' },     // 1면\r\n      { image: greenBrain, type: 'BRAIN' },     // 2면\r\n      { image: greenBrain, type: 'BRAIN' },     // 3면\r\n      { image: greenFootsteps, type: 'FOOTSTEPS' }, // 4면\r\n      { image: greenFootsteps, type: 'FOOTSTEPS' }, // 5면\r\n      { image: greenShotgun, type: 'SHOTGUN' }   // 6면\r\n    ]\r\n  }\r\n};\r\n\r\n// Dice 컴포넌트 수정 - 이미지 기반 3D 주사위\r\nconst Dice = ({ type, result, isRolling }) => {\r\n  const diceRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    if (!diceRef.current) return;\r\n    \r\n    // Three.js 설정\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n    \r\n    renderer.setSize(100, 100);\r\n    diceRef.current.innerHTML = '';\r\n    diceRef.current.appendChild(renderer.domElement);\r\n    \r\n    // 조명 설정\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(1, 1, 1);\r\n    scene.add(directionalLight);\r\n    \r\n    // 주사위 색상 설정\r\n    let diceColor;\r\n    if (type === 'RED') diceColor = 0xff0000;\r\n    else if (type === 'YELLOW') diceColor = 0xffff00;\r\n    else if (type === 'GREEN') diceColor = 0x00ff00;\r\n    else diceColor = 0xffffff;\r\n    \r\n    // 텍스처 로드 함수\r\n    const loadTexture = (imagePath) => {\r\n      const texture = new THREE.TextureLoader().load(imagePath);\r\n      texture.minFilter = THREE.LinearFilter;\r\n      return texture;\r\n    };\r\n    \r\n    // 주사위 면 텍스처 설정\r\n    let brainTexture, shotgunTexture, footstepsTexture;\r\n    \r\n    if (type === 'RED') {\r\n      brainTexture = loadTexture(redBrain);\r\n      shotgunTexture = loadTexture(redShotgun);\r\n      footstepsTexture = loadTexture(redFootsteps);\r\n    } else if (type === 'YELLOW') {\r\n      brainTexture = loadTexture(yellowBrain);\r\n      shotgunTexture = loadTexture(yellowShotgun);\r\n      footstepsTexture = loadTexture(yellowFootsteps);\r\n    } else if (type === 'GREEN') {\r\n      brainTexture = loadTexture(greenBrain);\r\n      shotgunTexture = loadTexture(greenShotgun);\r\n      footstepsTexture = loadTexture(greenFootsteps);\r\n    }\r\n    \r\n    // 주사위 면 재질 생성\r\n    const materials = [\r\n      new THREE.MeshStandardMaterial({ map: brainTexture, color: 0xffffff }), // 오른쪽 - 뇌\r\n      new THREE.MeshStandardMaterial({ map: shotgunTexture, color: 0xffffff }), // 왼쪽 - 총\r\n      new THREE.MeshStandardMaterial({ map: footstepsTexture, color: 0xffffff }), // 위 - 발자국\r\n      new THREE.MeshStandardMaterial({ map: brainTexture, color: 0xffffff }), // 아래 - 뇌\r\n      new THREE.MeshStandardMaterial({ map: shotgunTexture, color: 0xffffff }), // 앞 - 총\r\n      new THREE.MeshStandardMaterial({ map: footstepsTexture, color: 0xffffff }) // 뒤 - 발자국\r\n    ];\r\n    \r\n    // 주사위 생성\r\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n    const cube = new THREE.Mesh(geometry, materials);\r\n    scene.add(cube);\r\n    \r\n    // 주사위 위치 조정\r\n    camera.position.z = 2;\r\n    \r\n    // 애니메이션 설정\r\n    let targetRotationX = 0;\r\n    let targetRotationY = 0;\r\n    let targetRotationZ = 0;\r\n    \r\n    // 결과에 따라 주사위 회전 설정\r\n    if (result === 'BRAIN') {\r\n      // 뇌가 보이도록 회전\r\n      targetRotationX = 0;\r\n      targetRotationY = 0;\r\n    } else if (result === 'SHOTGUN') {\r\n      // 총이 보이도록 회전\r\n      targetRotationX = 0;\r\n      targetRotationY = Math.PI / 2;\r\n    } else if (result === 'FOOTSTEPS') {\r\n      // 발자국이 보이도록 회전\r\n      targetRotationX = Math.PI / 2;\r\n      targetRotationY = 0;\r\n    }\r\n    \r\n    // 초기 랜덤 회전 설정 (굴리는 효과)\r\n    if (isRolling) {\r\n      cube.rotation.x = Math.random() * Math.PI * 2;\r\n      cube.rotation.y = Math.random() * Math.PI * 2;\r\n      cube.rotation.z = Math.random() * Math.PI * 2;\r\n    }\r\n    \r\n    // 애니메이션 함수\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      \r\n      if (isRolling) {\r\n        // 굴리는 애니메이션\r\n        cube.rotation.x += 0.1;\r\n        cube.rotation.y += 0.15;\r\n        cube.rotation.z += 0.05;\r\n      } else {\r\n        // 결과 표시 애니메이션 - 부드럽게 회전\r\n        cube.rotation.x += (targetRotationX - cube.rotation.x) * 0.1;\r\n        cube.rotation.y += (targetRotationY - cube.rotation.y) * 0.1;\r\n        cube.rotation.z += (targetRotationZ - cube.rotation.z) * 0.1;\r\n      }\r\n      \r\n      renderer.render(scene, camera);\r\n    };\r\n    \r\n    animate();\r\n    \r\n    // 클린업\r\n    return () => {\r\n      if (diceRef.current) {\r\n        diceRef.current.innerHTML = '';\r\n      }\r\n      renderer.dispose();\r\n      geometry.dispose();\r\n      materials.forEach(material => {\r\n        if (material.map) material.map.dispose();\r\n        material.dispose();\r\n      });\r\n    };\r\n  }, [type, result, isRolling]);\r\n  \r\n  const getDiceColor = () => {\r\n    if (type === 'RED') return 'red-dice';\r\n    if (type === 'YELLOW') return 'yellow-dice';\r\n    if (type === 'GREEN') return 'green-dice';\r\n    return '';\r\n  };\r\n  \r\n  return (\r\n    <div className={`dice ${getDiceColor()} ${isRolling ? 'rolling-container' : ''}`}>\r\n      <div ref={diceRef} className=\"dice-3d-container\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction ZombieDice({ players, currentTurn, onTurnEnd, isMyTurn }) {\r\n  const [dicePool, setDicePool] = useState([]);\r\n  const [selectedDice, setSelectedDice] = useState([]);\r\n  const [rolledResults, setRolledResults] = useState([]);\r\n  const [currentBrains, setCurrentBrains] = useState(0);\r\n  const [currentShotguns, setCurrentShotguns] = useState(0);\r\n  const [isRolling, setIsRolling] = useState(false);\r\n  const [winner, setWinner] = useState(null);\r\n  const diceContainerRef = useRef(null);\r\n\r\n  // 주사위 선택 요청\r\n  const handleSelectDice = () => {\r\n    console.log('주사위 선택 요청');\r\n    \r\n    if (window.socket) {\r\n      const roomId = window.location.pathname.split('/')[2];\r\n      \r\n      window.socket.emit('gameAction', {\r\n        action: 'rollDice',\r\n        selectDice: true,\r\n        roomId\r\n      });\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n    }\r\n  };\r\n\r\n  // 주사위 굴리기 요청\r\n  const handleRoll = () => {\r\n    console.log('주사위 굴리기 요청');\r\n    \r\n    // 선택된 주사위가 없으면 먼저 선택\r\n    if (!selectedDice || selectedDice.length === 0) {\r\n      console.log('선택된 주사위 없음, 주사위 선택 요청');\r\n      handleSelectDice();\r\n      return;\r\n    }\r\n    \r\n    console.log('선택된 주사위로 굴리기 요청:', selectedDice);\r\n    \r\n    // 주사위 굴리기 요청\r\n    if (window.socket) {\r\n      const roomId = window.location.pathname.split('/')[2];\r\n      \r\n      window.socket.emit('gameAction', {\r\n        action: 'rollDice',\r\n        roomId\r\n      });\r\n      \r\n      setIsRolling(true);\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n    }\r\n  };\r\n\r\n  // 턴 종료 요청\r\n  const handleStop = () => {\r\n    // 샷건이 3개 이상이면 점수 0으로 처리\r\n    const finalScore = currentShotguns >= 3 ? 0 : currentBrains;\r\n    \r\n    if (window.socket) {\r\n      const roomId = window.location.pathname.split('/')[2];\r\n      \r\n      window.socket.emit('endTurn', {\r\n        roomId,\r\n        score: finalScore\r\n      });\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n    }\r\n    \r\n    // 로컬 콜백 호출\r\n    onTurnEnd(finalScore);\r\n  };\r\n\r\n  // 계속하기 요청\r\n  const handleContinue = () => {\r\n    // 도망간 주사위 찾기\r\n    const footstepsDice = rolledResults\r\n      .filter(result => result.result === 'FOOTSTEPS')\r\n      .map(result => result.type);\r\n    \r\n    if (window.socket) {\r\n      const roomId = window.location.pathname.split('/')[2];\r\n      \r\n      window.socket.emit('continueTurn', {\r\n        roomId,\r\n        footstepsDice\r\n      });\r\n      \r\n      // 이전 결과에서 도망이 아닌 주사위만 유지\r\n      const nonFootstepsResults = rolledResults.filter(result => result.result !== 'FOOTSTEPS');\r\n      setRolledResults(nonFootstepsResults);\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n    }\r\n  };\r\n\r\n  // 소켓 이벤트 리스너\r\n  useEffect(() => {\r\n    if (window.socket) {\r\n      console.log('소켓 이벤트 리스너 등록');\r\n      \r\n      // 게임 시작 이벤트\r\n      const handleGameStarted = (data) => {\r\n        console.log('게임 시작:', data);\r\n        \r\n        // 서버에서 받은 게임 상태로 초기화\r\n        if (data.gameState) {\r\n          console.log('게임 상태 초기화:', data.gameState);\r\n          \r\n          // 주사위 풀 초기화\r\n          if (data.gameState.dicePool && data.gameState.dicePool.length > 0) {\r\n            setDicePool(data.gameState.dicePool);\r\n          } else {\r\n            console.warn('주사위 풀이 없거나 비어있습니다. 초기화합니다.');\r\n            // 주사위 풀 초기화\r\n            const initialDicePool = [\r\n              ...Array(3).fill('RED'),\r\n              ...Array(4).fill('YELLOW'),\r\n              ...Array(6).fill('GREEN')\r\n            ];\r\n            \r\n            // 서버에 주사위 풀 초기화 알림\r\n            const roomId = window.location.pathname.split('/')[2];\r\n            window.socket.emit('updateDicePool', {\r\n              roomId,\r\n              dicePool: initialDicePool\r\n            });\r\n            \r\n            setDicePool(initialDicePool);\r\n          }\r\n          \r\n          setCurrentBrains(0);\r\n          setCurrentShotguns(0);\r\n          setRolledResults([]);\r\n          setSelectedDice([]);\r\n          setWinner(null);\r\n        } else {\r\n          // 게임 상태가 없는 경우 기본값으로 초기화\r\n          console.warn('게임 상태가 없습니다. 기본값으로 초기화합니다.');\r\n          const initialDicePool = [\r\n            ...Array(3).fill('RED'),\r\n            ...Array(4).fill('YELLOW'),\r\n            ...Array(6).fill('GREEN')\r\n          ];\r\n          \r\n          // 서버에 주사위 풀 초기화 알림\r\n          const roomId = window.location.pathname.split('/')[2];\r\n          window.socket.emit('updateDicePool', {\r\n            roomId,\r\n            dicePool: initialDicePool\r\n          });\r\n          \r\n          setDicePool(initialDicePool);\r\n          setCurrentBrains(0);\r\n          setCurrentShotguns(0);\r\n          setRolledResults([]);\r\n          setSelectedDice([]);\r\n          setWinner(null);\r\n        }\r\n      };\r\n      \r\n      // 주사위 선택 이벤트\r\n      const handleDiceSelected = (data) => {\r\n        console.log('주사위 선택됨:', data);\r\n        \r\n        setSelectedDice(data.selectedDice || []);\r\n        setDicePool(data.dicePool || []);\r\n        \r\n        // 주사위가 선택되면 자동으로 굴리기 요청\r\n        if (data.selectedDice && data.selectedDice.length > 0 && isMyTurn) {\r\n          console.log('주사위 선택 후 자동으로 굴리기 요청');\r\n          \r\n          // 약간의 딜레이 후 굴리기 요청 (UI 업데이트를 위해)\r\n          setTimeout(() => {\r\n            const roomId = window.location.pathname.split('/')[2];\r\n            window.socket.emit('gameAction', {\r\n              action: 'rollDice',\r\n              roomId\r\n            });\r\n            \r\n            setIsRolling(true);\r\n          }, 100);\r\n        }\r\n      };\r\n      \r\n      // 주사위 굴리기 결과 이벤트\r\n      const handleGameAction = (data) => {\r\n        console.log('게임 액션 수신:', data);\r\n        \r\n        if (data.action === 'rollDice') {\r\n          console.log('주사위 결과 수신:', data.results);\r\n          \r\n          // 결과 표시\r\n          setRolledResults(data.results);\r\n          setIsRolling(true);\r\n          \r\n          // 주사위 풀 업데이트\r\n          setDicePool(data.dicePool || []);\r\n          \r\n          // 애니메이션 후 결과 처리\r\n          setTimeout(() => {\r\n            // 내 턴일 때만 결과 처리\r\n            if (isMyTurn) {\r\n              // 결과 처리 - 뇌와 샷건 개수 누적\r\n              let newBrains = currentBrains;\r\n              let newShotguns = currentShotguns;\r\n              \r\n              data.results.forEach(({ result }) => {\r\n                if (result === 'BRAIN') newBrains++;\r\n                if (result === 'SHOTGUN') newShotguns++;\r\n              });\r\n              \r\n              // 상태 업데이트\r\n              setCurrentBrains(newBrains);\r\n              setCurrentShotguns(newShotguns);\r\n              \r\n              // 현재 상태를 서버에 전송\r\n              window.socket.emit('updateTurnStatus', {\r\n                roomId: window.location.pathname.split('/')[2],\r\n                currentBrains: newBrains,\r\n                currentShotguns: newShotguns\r\n              });\r\n            }\r\n            \r\n            setIsRolling(false);\r\n          }, 2500);\r\n        }\r\n      };\r\n      \r\n      // 턴 상태 업데이트 이벤트\r\n      const handleTurnStatusUpdated = (data) => {\r\n        console.log('턴 상태 업데이트:', data);\r\n        \r\n        // 내 턴이 아닐 때만 상태 업데이트\r\n        if (!isMyTurn) {\r\n          setCurrentBrains(data.currentBrains);\r\n          setCurrentShotguns(data.currentShotguns);\r\n        }\r\n        \r\n        // 주사위 풀 업데이트\r\n        setDicePool(data.dicePool || []);\r\n      };\r\n      \r\n      // 게임 상태 업데이트 이벤트\r\n      const handleGameStateUpdated = (gameState) => {\r\n        console.log('게임 상태 업데이트:', gameState);\r\n        \r\n        // 현재 턴이 변경되었는지 확인\r\n        const isMyTurnChanged = gameState.currentTurn !== currentTurn;\r\n        \r\n        if (isMyTurnChanged) {\r\n          console.log('턴 변경 감지, 주사위 풀 초기화');\r\n          \r\n          // 주사위 풀 초기화 - 서버에서 받은 값 사용 또는 기본값으로 초기화\r\n          const initialDicePool = gameState.dicePool || [\r\n            ...Array(3).fill('RED'),\r\n            ...Array(4).fill('YELLOW'),\r\n            ...Array(6).fill('GREEN')\r\n          ];\r\n          \r\n          // 서버에 주사위 풀 초기화 알림\r\n          const roomId = window.location.pathname.split('/')[2];\r\n          window.socket.emit('updateDicePool', {\r\n            roomId,\r\n            dicePool: initialDicePool\r\n          });\r\n          \r\n          setDicePool(initialDicePool);\r\n          setCurrentBrains(0);\r\n          setCurrentShotguns(0);\r\n          setRolledResults([]);\r\n          setSelectedDice([]);\r\n        } else {\r\n          // 주사위 풀 업데이트 - 서버 상태로 동기화\r\n          if (gameState.dicePool) {\r\n            console.log('주사위 풀 업데이트:', gameState.dicePool);\r\n            setDicePool(gameState.dicePool);\r\n          }\r\n        }\r\n        \r\n        // 현재 턴 업데이트\r\n        if (gameState.currentTurn !== undefined) {\r\n          // 턴이 변경되었으면 상태 초기화\r\n          setCurrentBrains(gameState.currentBrains || 0);\r\n          setCurrentShotguns(gameState.currentShotguns || 0);\r\n        }\r\n      };\r\n      \r\n      // 게임 종료 이벤트\r\n      const handleGameEnded = (data) => {\r\n        console.log('게임 종료:', data);\r\n        \r\n        setWinner(data.winner);\r\n      };\r\n      \r\n      // 게임 에러 이벤트\r\n      const handleGameError = (data) => {\r\n        console.error('게임 에러:', data.message);\r\n        \r\n        // 에러 처리\r\n        alert(`게임 에러: ${data.message}`);\r\n      };\r\n      \r\n      // 이벤트 리스너 등록\r\n      window.socket.on('gameStarted', handleGameStarted);\r\n      window.socket.on('diceSelected', handleDiceSelected);\r\n      window.socket.on('gameAction', handleGameAction);\r\n      window.socket.on('turnStatusUpdated', handleTurnStatusUpdated);\r\n      window.socket.on('gameStateUpdated', handleGameStateUpdated);\r\n      window.socket.on('gameEnded', handleGameEnded);\r\n      window.socket.on('gameError', handleGameError);\r\n      \r\n      // 클린업\r\n      return () => {\r\n        console.log('소켓 이벤트 리스너 제거');\r\n        window.socket.off('gameStarted', handleGameStarted);\r\n        window.socket.off('diceSelected', handleDiceSelected);\r\n        window.socket.off('gameAction', handleGameAction);\r\n        window.socket.off('turnStatusUpdated', handleTurnStatusUpdated);\r\n        window.socket.off('gameStateUpdated', handleGameStateUpdated);\r\n        window.socket.off('gameEnded', handleGameEnded);\r\n        window.socket.off('gameError', handleGameError);\r\n      };\r\n    }\r\n  }, [currentBrains, currentShotguns, isMyTurn, onTurnEnd]);\r\n\r\n  // 주사위 풀 상태 표시 컴포넌트\r\n  const DicePoolStatus = ({ dicePool }) => {\r\n    // 주사위 풀이 없으면 초기화\r\n    const pool = Array.isArray(dicePool) ? dicePool : [];\r\n    \r\n    // 주사위 색상별 개수 계산\r\n    const redCount = pool.filter(dice => dice === 'RED').length;\r\n    const yellowCount = pool.filter(dice => dice === 'YELLOW').length;\r\n    const greenCount = pool.filter(dice => dice === 'GREEN').length;\r\n    \r\n    return (\r\n      <div className=\"dice-pool-status mt-3\">\r\n        <h5>남은 주사위:</h5>\r\n        <div className=\"dice-pool-counts\">\r\n          <div className=\"dice-count red\">\r\n            <span className=\"dice-color-indicator red\"></span>\r\n            빨간색: {redCount}개\r\n          </div>\r\n          <div className=\"dice-count yellow\">\r\n            <span className=\"dice-color-indicator yellow\"></span>\r\n            노란색: {yellowCount}개\r\n          </div>\r\n          <div className=\"dice-count green\">\r\n            <span className=\"dice-color-indicator green\"></span>\r\n            초록색: {greenCount}개\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 점수판 렌더링\r\n  const renderScoreBoard = () => {\r\n    return (\r\n      <div className=\"score-board mb-4\">\r\n        <h4 className=\"text-center mb-3\">점수판</h4>\r\n        <div className=\"row\">\r\n          {players.map((player, index) => (\r\n            <div key={index} className={`col-md-${12 / players.length} mb-2`}>\r\n              <div className={`card ${index === currentTurn ? 'bg-light' : ''}`}>\r\n                <div className=\"card-body text-center\">\r\n                  <h5 className=\"card-title\">{player.nickname}</h5>\r\n                  <p className=\"card-text\">점수: {player.score || 0}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 다른 플레이어의 턴일 때 화면\r\n  if (!isMyTurn) {\r\n    return (\r\n      <div className=\"zombie-dice\">\r\n        {renderScoreBoard()}\r\n        <div className=\"text-center mb-3\">\r\n          <h3>{players[currentTurn].nickname}님의 차례입니다</h3>\r\n        </div>\r\n        \r\n        <div className=\"current-status mb-3\">\r\n          <div className=\"d-flex justify-content-around\">\r\n            <div>획득한 뇌: {currentBrains}</div>\r\n            <div>샷건 횟수: {currentShotguns}/3</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"dice-area mb-3\">\r\n          {isRolling ? (\r\n            <div className=\"text-center\">\r\n              <p>주사위 굴리는 중...</p>\r\n            </div>\r\n          ) : (\r\n            rolledResults.length > 0 && (\r\n              rolledResults.map((result, index) => (\r\n                <Dice \r\n                  key={index}\r\n                  type={result.type}\r\n                  result={result.result}\r\n                  isRolling={isRolling}\r\n                />\r\n              ))\r\n            )\r\n          )}\r\n        </div>\r\n\r\n        <DicePoolStatus dicePool={dicePool} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 내 턴일 때 화면\r\n  return (\r\n    <div className=\"zombie-dice\">\r\n      {renderScoreBoard()}\r\n      \r\n      {winner ? (\r\n        <div className=\"alert alert-success text-center\">\r\n          <h3>🏆 {winner.nickname}님이 승리하셨습니다! 🏆</h3>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"text-center mb-3\">\r\n            <h3 className=\"my-turn-indicator\">당신의 차례입니다!</h3>\r\n          </div>\r\n          \r\n          <div className=\"current-status mb-3\">\r\n            <div className=\"d-flex justify-content-around\">\r\n              <div>획득한 뇌: {currentBrains}</div>\r\n              <div>샷건 횟수: {currentShotguns}/3</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"dice-area mb-3\">\r\n            {isRolling ? (\r\n              <div className=\"text-center\">\r\n                <p>주사위 굴리는 중...</p>\r\n              </div>\r\n            ) : (\r\n              rolledResults.length > 0 ? (\r\n                rolledResults.map((result, index) => (\r\n                  <Dice \r\n                    key={index}\r\n                    type={result.type}\r\n                    result={result.result}\r\n                    isRolling={isRolling}\r\n                  />\r\n                ))\r\n              ) : (\r\n                <button \r\n                  className=\"btn btn-primary\"\r\n                  onClick={handleRoll}\r\n                  disabled={isRolling}\r\n                >\r\n                  {selectedDice.length === 0 ? \"주사위 선택\" : \"주사위 굴리기\"}\r\n                </button>\r\n              )\r\n            )}\r\n          </div>\r\n\r\n          {rolledResults.length > 0 && !winner && !isRolling && (\r\n            <div className=\"controls\">\r\n              <button \r\n                className=\"btn btn-success me-2\"\r\n                onClick={handleContinue}\r\n                disabled={currentShotguns >= 3}\r\n              >\r\n                계속하기\r\n              </button>\r\n              <button \r\n                className=\"btn btn-warning\"\r\n                onClick={handleStop}\r\n              >\r\n                {currentShotguns >= 3 ? \"턴 종료 (0점)\" : \"멈추기\"}\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {currentShotguns >= 3 && (\r\n            <div className=\"alert alert-danger mt-3\">\r\n              <strong>총이 3개 이상!</strong> 이번 턴에 획득한 뇌를 모두 잃었습니다. 턴을 종료해주세요.\r\n            </div>\r\n          )}\r\n          \r\n          <DicePoolStatus dicePool={dicePool} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ZombieDice;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
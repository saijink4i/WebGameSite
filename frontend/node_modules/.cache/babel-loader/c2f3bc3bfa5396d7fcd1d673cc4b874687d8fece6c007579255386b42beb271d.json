{"ast":null,"code":"var _jsxFileName = \"F:\\\\Workspace\\\\Cursor\\\\game\\\\frontend\\\\src\\\\components\\\\games\\\\ZombieDice.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../../styles/ZombieDice.css';\n\n// 상수 정의\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WINNING_SCORE = 13; // 승리 점수\nconst INITIAL_DICE_POOL = ['RED', 'RED', 'RED', 'YELLOW', 'YELLOW', 'YELLOW', 'YELLOW', 'GREEN', 'GREEN', 'GREEN', 'GREEN', 'GREEN', 'GREEN'];\nconst ZombieDice = ({\n  players,\n  isHost,\n  roomId\n}) => {\n  _s();\n  // 게임 상태 관리\n  const [gameStarted, setGameStarted] = useState(false);\n  const [dicePool, setDicePool] = useState([]);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(null);\n  const [selectedDice, setSelectedDice] = useState([]);\n  const [rolledResults, setRolledResults] = useState([]);\n  const [isRolling, setIsRolling] = useState(false);\n  const [scores, setScores] = useState({});\n  const [currentBrains, setCurrentBrains] = useState(0);\n  const [currentShotguns, setCurrentShotguns] = useState(0);\n  const [winner, setWinner] = useState(null);\n\n  // 소켓 참조\n  const socket = window.socket;\n\n  // 로그 출력 함수\n  const log = (message, data) => {\n    if (data) {\n      console.log(`[좀비다이스 클라이언트] ${message}`, data);\n    } else {\n      console.log(`[좀비다이스 클라이언트] ${message}`);\n    }\n  };\n\n  // 게임 시작 처리\n  const handleGameStart = () => {\n    log('게임 시작 요청');\n    if (!socket) {\n      log('오류: 소켓 연결이 없습니다');\n      return;\n    }\n\n    // 게임 상태 초기화\n    setGameStarted(true);\n\n    // 첫 번째 플레이어 턴으로 설정\n    const firstPlayer = players[0];\n    setCurrentPlayer(firstPlayer);\n    setIsMyTurn(socket.id === firstPlayer.id);\n\n    // 초기 점수 설정\n    const initialScores = {};\n    players.forEach(p => {\n      initialScores[p.id] = 0;\n    });\n    setScores(initialScores);\n\n    // 주사위 풀 초기화\n    resetDicePool();\n\n    // 다른 플레이어들에게 게임 시작 알림\n    socket.emit('gameStarted', {\n      roomId,\n      gameType: 'ZombieDice',\n      firstPlayer: firstPlayer.id\n    });\n    log('게임 시작됨');\n  };\n\n  // 주사위 풀 초기화\n  const resetDicePool = () => {\n    setDicePool([...INITIAL_DICE_POOL]);\n    log('주사위 풀 초기화');\n  };\n\n  // 게임 이벤트 리스너 설정\n  useEffect(() => {\n    if (!socket) {\n      log('소켓 연결이 없습니다');\n      return;\n    }\n\n    // 게임 시작 이벤트 수신\n    socket.on('gameStarted', data => {\n      log('게임 시작 이벤트 수신:', data);\n      const {\n        firstPlayer\n      } = data;\n\n      // 게임 상태 업데이트\n      setGameStarted(true);\n\n      // 내 차례인지 확인\n      const isMyTurn = firstPlayer === socket.id;\n      setIsMyTurn(isMyTurn);\n      setCurrentPlayer(players.find(p => p.id === firstPlayer));\n      log(`게임이 시작되었습니다. ${isMyTurn ? '내 차례입니다.' : '다른 플레이어의 차례입니다.'}`);\n    });\n\n    // 주사위 굴림 결과 수신\n    socket.on('diceRolled', data => {\n      log('주사위 굴림 결과 수신:', data);\n      const {\n        player,\n        results,\n        brains,\n        shotguns,\n        dicePool: updatedPool,\n        totalBrains,\n        totalShotguns\n      } = data;\n\n      // 주사위 결과 표시\n      setRolledResults(results);\n\n      // 내 차례인 경우 점수 업데이트\n      if (player === socket.id) {\n        setCurrentBrains(totalBrains || brains);\n        setCurrentShotguns(totalShotguns || shotguns);\n        setDicePool(updatedPool);\n      }\n\n      // 애니메이션 종료\n      setIsRolling(false);\n    });\n\n    // 턴 변경 이벤트 수신\n    socket.on('turnChanged', data => {\n      log('턴 변경 이벤트 수신:', data);\n      const {\n        nextPlayer,\n        scores: updatedScores\n      } = data;\n\n      // 점수 업데이트\n      setScores(updatedScores);\n\n      // 다음 플레이어 설정\n      setCurrentPlayer(players.find(p => p.id === nextPlayer));\n      setIsMyTurn(nextPlayer === socket.id);\n\n      // 턴 초기화\n      resetTurn();\n    });\n\n    // 정리 함수\n    return () => {\n      socket.off('gameStarted');\n      socket.off('diceRolled');\n      socket.off('turnChanged');\n    };\n  }, [socket, players]);\n\n  // 턴 초기화\n  const resetTurn = () => {\n    setCurrentBrains(0);\n    setCurrentShotguns(0);\n    setRolledResults([]);\n    log('턴 초기화');\n  };\n\n  // 주사위 굴리기\n  const handleRoll = () => {\n    if (!isMyTurn || isRolling || dicePool.length < 3) return;\n    log('주사위 굴리기');\n\n    // 주사위 굴림 상태 설정\n    setIsRolling(true);\n\n    // 서버에 주사위 굴리기 요청\n    socket.emit('rollDice', {\n      roomId,\n      dicePool\n    });\n  };\n\n  // 턴 종료\n  const handleStop = () => {\n    if (!isMyTurn || isRolling) return;\n    log('턴 종료');\n\n    // 서버에 턴 종료 요청\n    socket.emit('endTurn', {\n      roomId,\n      keepScore: currentShotguns < 3\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"zombie-dice\",\n    children: !gameStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC880\\uBE44 \\uB2E4\\uC774\\uC2A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uAC01\\uC790 \\uC880\\uBE44\\uAC00 \\uB418\\uC5B4 \\uB1CC\\uB97C \\uB9CE\\uC774 \\uBA39\\uB294 \\uC0AC\\uB78C\\uC774 \\uC2B9\\uB9AC\\uD558\\uB294 \\uAC8C\\uC784\\uC785\\uB2C8\\uB2E4!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), isHost && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-lg\",\n        onClick: handleGameStart,\n        children: \"\\uAC8C\\uC784 \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this), !isHost && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert alert-info\",\n        children: \"\\uBC29\\uC7A5\\uC774 \\uAC8C\\uC784\\uC744 \\uC2DC\\uC791\\uD558\\uAE30\\uB97C \\uAE30\\uB2E4\\uB9AC\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-board mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center mb-3\",\n          children: \"\\uC810\\uC218\\uD310\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\uD50C\\uB808\\uC774\\uC5B4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\uC810\\uC218\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.entries(scores).sort(([, a], [, b]) => b - a).map(([playerId, score]) => {\n              const player = players.find(p => p.id === playerId);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: winner && winner.id === playerId ? 'table-success' : '',\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [player === null || player === void 0 ? void 0 : player.nickname, \" \", playerId === socket.id && '(나)']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: score\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 25\n                }, this)]\n              }, playerId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-area\",\n        children: [rolledResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rolled-results mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uC8FC\\uC0AC\\uC704 \\uACB0\\uACFC:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dice-results-container\",\n            children: rolledResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `dice-result result-${result.result.toLowerCase()}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: `dice-type ${result.type.toLowerCase()}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `/zombie-dice/faces/${result.type.toLowerCase()}-${result.result.toLowerCase()}.png`,\n                alt: `${result.result}`,\n                className: \"dice-result-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dice-result-text\",\n                children: result.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this), currentShotguns >= 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-danger\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uACBD\\uACE0:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this), \" \\uCD1D\\uC774 3\\uAC1C \\uC774\\uC0C1 \\uBC1C\\uACAC\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4! \\uD134\\uC744 \\uC885\\uB8CC\\uD574\\uC57C \\uD569\\uB2C8\\uB2E4.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-pool-status mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"\\uB0A8\\uC740 \\uC8FC\\uC0AC\\uC704: \", dicePool.length, \"\\uAC1C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dice-counts\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dice-count\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dice-sample red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"\\uBE68\\uAC04 \\uC8FC\\uC0AC\\uC704: \", dicePool.filter(d => d === 'RED').length, \"\\uAC1C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dice-count\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dice-sample yellow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"\\uB178\\uB780 \\uC8FC\\uC0AC\\uC704: \", dicePool.filter(d => d === 'YELLOW').length, \"\\uAC1C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dice-count\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dice-sample green\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"\\uB179\\uC0C9 \\uC8FC\\uC0AC\\uC704: \", dicePool.filter(d => d === 'GREEN').length, \"\\uAC1C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: isMyTurn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              onClick: handleRoll,\n              disabled: isRolling || dicePool.length < 3,\n              children: \"\\uC8FC\\uC0AC\\uC704 \\uAD74\\uB9AC\\uAE30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-warning\",\n              onClick: handleStop,\n              disabled: isRolling,\n              children: \"\\uBA48\\uCD94\\uAE30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uB2E4\\uB978 \\uD50C\\uB808\\uC774\\uC5B4\\uC758 \\uCC28\\uB840\\uC785\\uB2C8\\uB2E4...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(ZombieDice, \"MFFrbKgAwC+ktY/jz1SCm71F3VM=\");\n_c = ZombieDice;\nexport default ZombieDice;\nvar _c;\n$RefreshReg$(_c, \"ZombieDice\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","WINNING_SCORE","INITIAL_DICE_POOL","ZombieDice","players","isHost","roomId","_s","gameStarted","setGameStarted","dicePool","setDicePool","isMyTurn","setIsMyTurn","currentPlayer","setCurrentPlayer","selectedDice","setSelectedDice","rolledResults","setRolledResults","isRolling","setIsRolling","scores","setScores","currentBrains","setCurrentBrains","currentShotguns","setCurrentShotguns","winner","setWinner","socket","window","log","message","data","console","handleGameStart","firstPlayer","id","initialScores","forEach","p","resetDicePool","emit","gameType","on","find","player","results","brains","shotguns","updatedPool","totalBrains","totalShotguns","nextPlayer","updatedScores","resetTurn","off","handleRoll","length","handleStop","keepScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Object","entries","sort","a","b","map","playerId","score","nickname","result","index","toLowerCase","type","src","alt","filter","d","disabled","_c","$RefreshReg$"],"sources":["F:/Workspace/Cursor/game/frontend/src/components/games/ZombieDice.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport '../../styles/ZombieDice.css';\r\n\r\n// 상수 정의\r\nconst WINNING_SCORE = 13;  // 승리 점수\r\nconst INITIAL_DICE_POOL = [\r\n  'RED', 'RED', 'RED',\r\n  'YELLOW', 'YELLOW', 'YELLOW', 'YELLOW',\r\n  'GREEN', 'GREEN', 'GREEN', 'GREEN', 'GREEN', 'GREEN'\r\n];\r\n\r\nconst ZombieDice = ({ players, isHost, roomId }) => {\r\n  // 게임 상태 관리\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [dicePool, setDicePool] = useState([]);\r\n  const [isMyTurn, setIsMyTurn] = useState(false);\r\n  const [currentPlayer, setCurrentPlayer] = useState(null);\r\n  const [selectedDice, setSelectedDice] = useState([]);\r\n  const [rolledResults, setRolledResults] = useState([]);\r\n  const [isRolling, setIsRolling] = useState(false);\r\n  const [scores, setScores] = useState({});\r\n  const [currentBrains, setCurrentBrains] = useState(0);\r\n  const [currentShotguns, setCurrentShotguns] = useState(0);\r\n  const [winner, setWinner] = useState(null);\r\n  \r\n  // 소켓 참조\r\n  const socket = window.socket;\r\n  \r\n  // 로그 출력 함수\r\n  const log = (message, data) => {\r\n    if (data) {\r\n      console.log(`[좀비다이스 클라이언트] ${message}`, data);\r\n    } else {\r\n      console.log(`[좀비다이스 클라이언트] ${message}`);\r\n    }\r\n  };\r\n  \r\n  // 게임 시작 처리\r\n  const handleGameStart = () => {\r\n    log('게임 시작 요청');\r\n    \r\n    if (!socket) {\r\n      log('오류: 소켓 연결이 없습니다');\r\n      return;\r\n    }\r\n    \r\n    // 게임 상태 초기화\r\n    setGameStarted(true);\r\n    \r\n    // 첫 번째 플레이어 턴으로 설정\r\n    const firstPlayer = players[0];\r\n    setCurrentPlayer(firstPlayer);\r\n    setIsMyTurn(socket.id === firstPlayer.id);\r\n    \r\n    // 초기 점수 설정\r\n    const initialScores = {};\r\n    players.forEach(p => {\r\n      initialScores[p.id] = 0;\r\n    });\r\n    setScores(initialScores);\r\n    \r\n    // 주사위 풀 초기화\r\n    resetDicePool();\r\n    \r\n    // 다른 플레이어들에게 게임 시작 알림\r\n    socket.emit('gameStarted', { \r\n      roomId, \r\n      gameType: 'ZombieDice',\r\n      firstPlayer: firstPlayer.id\r\n    });\r\n    \r\n    log('게임 시작됨');\r\n  };\r\n  \r\n  // 주사위 풀 초기화\r\n  const resetDicePool = () => {\r\n    setDicePool([...INITIAL_DICE_POOL]);\r\n    log('주사위 풀 초기화');\r\n  };\r\n  \r\n  // 게임 이벤트 리스너 설정\r\n  useEffect(() => {\r\n    if (!socket) {\r\n      log('소켓 연결이 없습니다');\r\n      return;\r\n    }\r\n    \r\n    // 게임 시작 이벤트 수신\r\n    socket.on('gameStarted', (data) => {\r\n      log('게임 시작 이벤트 수신:', data);\r\n      \r\n      const { firstPlayer } = data;\r\n      \r\n      // 게임 상태 업데이트\r\n      setGameStarted(true);\r\n      \r\n      // 내 차례인지 확인\r\n      const isMyTurn = firstPlayer === socket.id;\r\n      setIsMyTurn(isMyTurn);\r\n      setCurrentPlayer(players.find(p => p.id === firstPlayer));\r\n      \r\n      log(`게임이 시작되었습니다. ${isMyTurn ? '내 차례입니다.' : '다른 플레이어의 차례입니다.'}`);\r\n    });\r\n    \r\n    // 주사위 굴림 결과 수신\r\n    socket.on('diceRolled', (data) => {\r\n      log('주사위 굴림 결과 수신:', data);\r\n      \r\n      const { \r\n        player, results, brains, shotguns, \r\n        dicePool: updatedPool, totalBrains, totalShotguns \r\n      } = data;\r\n      \r\n      // 주사위 결과 표시\r\n      setRolledResults(results);\r\n      \r\n      // 내 차례인 경우 점수 업데이트\r\n      if (player === socket.id) {\r\n        setCurrentBrains(totalBrains || brains);\r\n        setCurrentShotguns(totalShotguns || shotguns);\r\n        setDicePool(updatedPool);\r\n      }\r\n      \r\n      // 애니메이션 종료\r\n      setIsRolling(false);\r\n    });\r\n    \r\n    // 턴 변경 이벤트 수신\r\n    socket.on('turnChanged', (data) => {\r\n      log('턴 변경 이벤트 수신:', data);\r\n      \r\n      const { nextPlayer, scores: updatedScores } = data;\r\n      \r\n      // 점수 업데이트\r\n      setScores(updatedScores);\r\n      \r\n      // 다음 플레이어 설정\r\n      setCurrentPlayer(players.find(p => p.id === nextPlayer));\r\n      setIsMyTurn(nextPlayer === socket.id);\r\n      \r\n      // 턴 초기화\r\n      resetTurn();\r\n    });\r\n    \r\n    // 정리 함수\r\n    return () => {\r\n      socket.off('gameStarted');\r\n      socket.off('diceRolled');\r\n      socket.off('turnChanged');\r\n    };\r\n  }, [socket, players]);\r\n  \r\n  // 턴 초기화\r\n  const resetTurn = () => {\r\n    setCurrentBrains(0);\r\n    setCurrentShotguns(0);\r\n    setRolledResults([]);\r\n    log('턴 초기화');\r\n  };\r\n  \r\n  // 주사위 굴리기\r\n  const handleRoll = () => {\r\n    if (!isMyTurn || isRolling || dicePool.length < 3) return;\r\n    \r\n    log('주사위 굴리기');\r\n    \r\n    // 주사위 굴림 상태 설정\r\n    setIsRolling(true);\r\n    \r\n    // 서버에 주사위 굴리기 요청\r\n    socket.emit('rollDice', {\r\n      roomId,\r\n      dicePool\r\n    });\r\n  };\r\n  \r\n  // 턴 종료\r\n  const handleStop = () => {\r\n    if (!isMyTurn || isRolling) return;\r\n    \r\n    log('턴 종료');\r\n    \r\n    // 서버에 턴 종료 요청\r\n    socket.emit('endTurn', {\r\n      roomId,\r\n      keepScore: currentShotguns < 3\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <div className=\"zombie-dice\">\r\n      {!gameStarted ? (\r\n        <div className=\"text-center mb-4\">\r\n          <h2>좀비 다이스</h2>\r\n          <p>각자 좀비가 되어 뇌를 많이 먹는 사람이 승리하는 게임입니다!</p>\r\n          {isHost && (\r\n            <button \r\n              className=\"btn btn-primary btn-lg\"\r\n              onClick={handleGameStart}\r\n            >\r\n              게임 시작\r\n            </button>\r\n          )}\r\n          {!isHost && (\r\n            <p className=\"alert alert-info\">\r\n              방장이 게임을 시작하기를 기다리고 있습니다.\r\n            </p>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {/* 게임 화면 내용 */}\r\n          <div className=\"score-board mb-4\">\r\n            <h3 className=\"text-center mb-3\">점수판</h3>\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>플레이어</th>\r\n                  <th>점수</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.entries(scores)\r\n                  .sort(([, a], [, b]) => b - a)\r\n                  .map(([playerId, score]) => {\r\n                    const player = players.find(p => p.id === playerId);\r\n                    return (\r\n                      <tr key={playerId} className={winner && winner.id === playerId ? 'table-success' : ''}>\r\n                        <td>{player?.nickname} {playerId === socket.id && '(나)'}</td>\r\n                        <td>{score}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          \r\n          {/* 주사위 영역 */}\r\n          <div className=\"dice-area\">\r\n            {/* 주사위 결과 영역 */}\r\n            {rolledResults.length > 0 && (\r\n              <div className=\"rolled-results mb-3\">\r\n                <h4>주사위 결과:</h4>\r\n                <div className=\"dice-results-container\">\r\n                  {rolledResults.map((result, index) => (\r\n                    <div \r\n                      key={index} \r\n                      className={`dice-result result-${result.result.toLowerCase()}`}\r\n                    >\r\n                      <div className={`dice-type ${result.type.toLowerCase()}`}></div>\r\n                      <img \r\n                        src={`/zombie-dice/faces/${result.type.toLowerCase()}-${result.result.toLowerCase()}.png`} \r\n                        alt={`${result.result}`}\r\n                        className=\"dice-result-image\"\r\n                      />\r\n                      <div className=\"dice-result-text\">{result.result}</div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* 경고 메시지 */}\r\n            {currentShotguns >= 3 && (\r\n              <div className=\"alert alert-danger\">\r\n                <strong>경고:</strong> 총이 3개 이상 발견되었습니다! 턴을 종료해야 합니다.\r\n              </div>\r\n            )}\r\n            \r\n            {/* 주사위 풀 상태 */}\r\n            <div className=\"dice-pool-status mb-3\">\r\n              <h4>남은 주사위: {dicePool.length}개</h4>\r\n              <div className=\"dice-counts\">\r\n                <div className=\"dice-count\">\r\n                  <div className=\"dice-sample red\"></div>\r\n                  <span>빨간 주사위: {dicePool.filter(d => d === 'RED').length}개</span>\r\n                </div>\r\n                <div className=\"dice-count\">\r\n                  <div className=\"dice-sample yellow\"></div>\r\n                  <span>노란 주사위: {dicePool.filter(d => d === 'YELLOW').length}개</span>\r\n                </div>\r\n                <div className=\"dice-count\">\r\n                  <div className=\"dice-sample green\"></div>\r\n                  <span>녹색 주사위: {dicePool.filter(d => d === 'GREEN').length}개</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* 조작 버튼 */}\r\n            <div className=\"controls\">\r\n              {isMyTurn ? (\r\n                <>\r\n                  <button \r\n                    className=\"btn btn-primary\" \r\n                    onClick={handleRoll}\r\n                    disabled={isRolling || dicePool.length < 3}\r\n                  >\r\n                    주사위 굴리기\r\n                  </button>\r\n                  <button \r\n                    className=\"btn btn-warning\" \r\n                    onClick={handleStop}\r\n                    disabled={isRolling}\r\n                  >\r\n                    멈추기\r\n                  </button>\r\n                </>\r\n              ) : (\r\n                <p>다른 플레이어의 차례입니다...</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ZombieDice;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"F:\\\\Workspace\\\\Cursor\\\\game\\\\frontend\\\\src\\\\components\\\\games\\\\ZombieDice.js\",\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport redBrain from '../../assets/zombie-dice/faces/red-brain.png';\nimport redFootsteps from '../../assets/zombie-dice/faces/red-footsteps.png';\nimport redShotgun from '../../assets/zombie-dice/faces/red-shotgun.png';\nimport yellowBrain from '../../assets/zombie-dice/faces/yellow-brain.png';\nimport yellowFootsteps from '../../assets/zombie-dice/faces/yellow-footsteps.png';\nimport yellowShotgun from '../../assets/zombie-dice/faces/yellow-shotgun.png';\nimport greenBrain from '../../assets/zombie-dice/faces/green-brain.png';\nimport greenFootsteps from '../../assets/zombie-dice/faces/green-footsteps.png';\nimport greenShotgun from '../../assets/zombie-dice/faces/green-shotgun.png';\nimport '../styles/ZombieDice.css';\n\n// 승리 점수\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WINNING_SCORE = 13;\n\n// 주사위 면 정의\nconst DICE_FACES = {\n  RED: {\n    faces: [{\n      image: redBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: redFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 2면\n    {\n      image: redFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 3면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    },\n    // 4면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    },\n    // 5면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  },\n  YELLOW: {\n    faces: [{\n      image: yellowBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: yellowBrain,\n      type: 'BRAIN'\n    },\n    // 2면\n    {\n      image: yellowFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 3면\n    {\n      image: yellowFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 4면\n    {\n      image: yellowShotgun,\n      type: 'SHOTGUN'\n    },\n    // 5면\n    {\n      image: yellowShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  },\n  GREEN: {\n    faces: [{\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 2면\n    {\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 3면\n    {\n      image: greenFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 4면\n    {\n      image: greenFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 5면\n    {\n      image: greenShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  }\n};\nfunction ZombieDice({\n  players,\n  currentTurn,\n  onTurnEnd,\n  isMyTurn\n}) {\n  _s2();\n  var _s = $RefreshSig$();\n  const [dicePool, setDicePool] = useState([...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')]);\n  const [selectedDice, setSelectedDice] = useState([]);\n  const [rolledResults, setRolledResults] = useState([]);\n  const [currentBrains, setCurrentBrains] = useState(0);\n  const [currentShotguns, setCurrentShotguns] = useState(0);\n  const [keptDice, setKeptDice] = useState([]);\n  const [isRolling, setIsRolling] = useState(false);\n  const diceContainerRef = useRef(null);\n\n  // 컴포넌트 마운트 시 주사위 선택\n  useEffect(() => {\n    if (isMyTurn && rolledResults.length === 0 && selectedDice.length === 0) {\n      // 내 턴이 시작되면 자동으로 주사위 3개 선택\n      pickDice();\n    }\n  }, [isMyTurn, rolledResults.length, selectedDice.length]);\n\n  // 주사위 3개 랜덤 선택 함수 수정\n  const pickDice = () => {\n    console.log('주사위 선택 시작, 현재 풀:', dicePool);\n    const newDice = [];\n    const tempPool = [...dicePool];\n\n    // 풀이 비어있으면 초기화하지 않고 로그만 출력\n    if (tempPool.length < 3) {\n      console.error('주사위 풀이 부족합니다:', tempPool);\n      return;\n    }\n    for (let i = 0; i < 3; i++) {\n      if (tempPool.length === 0) break;\n      const randomIndex = Math.floor(Math.random() * tempPool.length);\n      newDice.push(tempPool[randomIndex]);\n      tempPool.splice(randomIndex, 1);\n    }\n    console.log('선택된 주사위:', newDice);\n    console.log('남은 풀:', tempPool);\n\n    // 주사위 풀 업데이트\n    setDicePool(tempPool);\n    setSelectedDice(newDice);\n\n    // 주사위 풀 상태를 서버에 전송\n    const roomId = window.location.pathname.split('/')[2];\n    window.socket.emit('updateDicePool', {\n      roomId,\n      dicePool: tempPool\n    });\n  };\n\n  // 주사위 굴리기\n  const handleRoll = () => {\n    rollDiceWithSelected(selectedDice, dicePool);\n  };\n\n  // 결과 처리 함수 수정\n  const processResults = results => {\n    // 결과 계산 - 이전 값에 누적\n    let newBrains = currentBrains;\n    let newShotguns = currentShotguns;\n    results.forEach(({\n      result,\n      type\n    }) => {\n      if (result === 'BRAIN') newBrains++;\n      if (result === 'SHOTGUN') newShotguns++;\n      // 발자국은 처리하지 않음\n    });\n\n    // 상태 업데이트\n    setCurrentBrains(newBrains);\n    setCurrentShotguns(newShotguns);\n\n    // 샷건이 3개 이상이면 자동 턴 종료 제거\n    // 대신 UI에서 계속하기 버튼 비활성화 처리\n  };\n\n  // 게임 상태 초기화 함수 수정\n  const resetGameState = () => {\n    console.log('게임 상태 초기화');\n    // 주사위 풀 초기화 - 정확한 개수로 설정\n    const initialDicePool = [...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')];\n    setDicePool(initialDicePool);\n    setCurrentBrains(0);\n    setCurrentShotguns(0);\n    setRolledResults([]);\n    setSelectedDice([]);\n\n    // 주사위 풀 초기화를 서버에 알림\n    if (window.socket) {\n      const roomId = window.location.pathname.split('/')[2];\n      window.socket.emit('updateDicePool', {\n        roomId,\n        dicePool: initialDicePool\n      });\n    }\n  };\n\n  // 턴 종료 함수 수정\n  const handleStop = () => {\n    // 샷건이 3개 이상이면 점수 0으로 처리\n    const finalScore = currentShotguns >= 3 ? 0 : currentBrains;\n\n    // Room 컴포넌트에서 roomId 가져오기\n    const roomId = window.location.pathname.split('/')[2]; // URL에서 roomId 추출\n\n    console.log('턴 종료 요청 전송:', {\n      roomId,\n      score: finalScore\n    });\n\n    // 서버에 턴 종료 요청 전송\n    if (window.socket) {\n      window.socket.emit('endTurn', {\n        roomId,\n        score: finalScore\n      });\n    } else {\n      console.error('소켓 연결이 없습니다!');\n    }\n\n    // 로컬 콜백 호출 (Room 컴포넌트에 알림)\n    onTurnEnd(finalScore);\n  };\n\n  // 계속 진행 함수 수정\n  const handleContinue = () => {\n    // 도망간 주사위 찾기\n    const footstepsDice = rolledResults.filter(result => result.result === 'FOOTSTEPS').map(result => result.type);\n\n    // 새로운 주사위 3개 선택\n    const newSelectedDice = [];\n    let tempPool = [...dicePool];\n\n    // 주사위 풀이 3개 이하인 경우 풀 초기화\n    if (tempPool.length < 3) {\n      console.log('주사위 풀 부족, 풀 초기화');\n\n      // 주사위 풀 초기화\n      tempPool = [...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')];\n\n      // 도망간 주사위 제외\n      footstepsDice.forEach(diceType => {\n        const index = tempPool.indexOf(diceType);\n        if (index !== -1) {\n          tempPool.splice(index, 1);\n        }\n      });\n    }\n\n    // 3개의 새 주사위 선택\n    for (let i = 0; i < 3; i++) {\n      if (tempPool.length === 0) break;\n      const randomIndex = Math.floor(Math.random() * tempPool.length);\n      newSelectedDice.push(tempPool[randomIndex]);\n      tempPool.splice(randomIndex, 1);\n    }\n\n    // 도망간 주사위와 새 주사위 합치기\n    const allDiceToRoll = [...footstepsDice, ...newSelectedDice];\n\n    // 주사위 풀 업데이트\n    setDicePool(tempPool);\n\n    // 주사위 풀 상태를 서버에 전송\n    window.socket.emit('updateDicePool', {\n      roomId: window.location.pathname.split('/')[2],\n      dicePool: tempPool\n    });\n\n    // 이전 결과에서 도망이 아닌 주사위만 유지\n    const nonFootstepsResults = rolledResults.filter(result => result.result !== 'FOOTSTEPS');\n    setRolledResults(nonFootstepsResults);\n\n    // 즉시 주사위 굴리기\n    setTimeout(() => {\n      rollDiceWithSelected(allDiceToRoll, tempPool);\n    }, 100);\n  };\n\n  // 주사위 굴리기 함수 수정\n  const rollDiceWithSelected = (selectedDiceToRoll, currentPool) => {\n    console.log('주사위 굴리기 시작, 선택된 주사위:', selectedDiceToRoll);\n    console.log('현재 풀:', currentPool);\n    setIsRolling(true);\n\n    // 서버에 주사위 굴리기 요청\n    if (window.socket) {\n      // Room 컴포넌트에서 roomId 가져오기\n      const roomId = window.location.pathname.split('/')[2]; // URL에서 roomId 추출\n\n      console.log('주사위 굴리기 요청 전송:', {\n        action: 'rollDice',\n        roomId,\n        selectedDice: selectedDiceToRoll,\n        dicePool: currentPool\n      });\n      window.socket.emit('gameAction', {\n        action: 'rollDice',\n        roomId,\n        selectedDice: selectedDiceToRoll,\n        dicePool: currentPool\n      });\n    } else {\n      console.error('소켓 연결이 없습니다!');\n      setIsRolling(false);\n    }\n\n    // 서버 응답이 없을 경우를 대비한 타임아웃\n    setTimeout(() => {\n      if (isRolling) {\n        console.error('서버 응답 타임아웃');\n        setIsRolling(false);\n      }\n    }, 5000);\n  };\n\n  // 점수판 렌더링\n  const renderScoreBoard = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"score-board\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uD50C\\uB808\\uC774\\uC5B4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uC810\\uC218\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: index === currentTurn ? 'current-player' : '',\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: player.nickname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: player.score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this)]\n        }, player.nickname, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n\n  // 승자가 있는지 확인\n  const winner = players.find(player => player.score >= WINNING_SCORE);\n\n  // 소켓 이벤트 리스너 수정\n  useEffect(() => {\n    if (window.socket) {\n      console.log('소켓 이벤트 리스너 등록');\n\n      // 게임 시작 이벤트 리스너 추가\n      const handleGameStarted = data => {\n        console.log('게임 시작:', data);\n\n        // 게임 시작 시 주사위 풀 초기화 - 서버에서 받은 값으로 설정\n        if (data.gameState && data.gameState.dicePool) {\n          setDicePool(data.gameState.dicePool);\n        } else {\n          // 서버에서 받은 값이 없으면 기본값으로 설정\n          const initialDicePool = [...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')];\n          setDicePool(initialDicePool);\n        }\n        setCurrentBrains(0);\n        setCurrentShotguns(0);\n        setRolledResults([]);\n        setSelectedDice([]);\n      };\n\n      // 주사위 굴리기 결과 수신 이벤트 리스너 추가\n      const handleGameAction = data => {\n        console.log('게임 액션 수신:', data);\n        if (data.action === 'rollDice') {\n          console.log('주사위 결과 수신:', data.results);\n\n          // 결과 표시 - 새 결과로 설정\n          setRolledResults(data.results);\n          setIsRolling(true); // 모든 플레이어에게 굴리는 애니메이션 표시\n\n          // 주사위 풀 업데이트 - 모든 플레이어에게 동일하게 적용\n          if (data.dicePool) {\n            // 주사위 풀에 주사위 색상만 저장되도록 확인\n            const validDicePool = data.dicePool.filter(dice => dice === 'RED' || dice === 'YELLOW' || dice === 'GREEN');\n            setDicePool(validDicePool);\n          }\n\n          // 애니메이션 후 결과 처리 - 모든 플레이어에게 동일한 시간 적용\n          setTimeout(() => {\n            // 내 턴일 때만 결과 처리 (점수 누적)\n            if (isMyTurn) {\n              // 결과 처리 - 뇌와 샷건 개수 누적\n              let newBrains = currentBrains;\n              let newShotguns = currentShotguns;\n              data.results.forEach(({\n                result\n              }) => {\n                if (result === 'BRAIN') newBrains++;\n                if (result === 'SHOTGUN') newShotguns++;\n              });\n\n              // 상태 업데이트\n              setCurrentBrains(newBrains);\n              setCurrentShotguns(newShotguns);\n\n              // 현재 상태를 서버에 전송하여 다른 플레이어들에게도 업데이트\n              window.socket.emit('updateTurnStatus', {\n                roomId: window.location.pathname.split('/')[2],\n                currentBrains: newBrains,\n                currentShotguns: newShotguns,\n                dicePool: data.dicePool // 주사위 풀도 함께 전송\n              });\n            }\n            setIsRolling(false);\n          }, 2500); // 모든 플레이어에게 동일한 애니메이션 시간 적용\n        }\n      };\n\n      // 턴 상태 업데이트 이벤트 리스너 추가\n      const handleTurnStatusUpdated = data => {\n        console.log('턴 상태 업데이트:', data);\n\n        // 내 턴이 아닐 때만 상태 업데이트 (내 턴일 때는 이미 로컬에서 처리됨)\n        if (!isMyTurn) {\n          setCurrentBrains(data.currentBrains);\n          setCurrentShotguns(data.currentShotguns);\n\n          // 주사위 풀 업데이트\n          if (data.dicePool) {\n            setDicePool(data.dicePool);\n          }\n        }\n      };\n\n      // 게임 상태 업데이트 이벤트 리스너 수정\n      const handleGameStateUpdated = gameState => {\n        console.log('게임 상태 업데이트:', gameState);\n\n        // 현재 턴이 변경되었는지 확인\n        const isMyTurnChanged = gameState.currentTurn !== currentTurn;\n        if (isMyTurnChanged) {\n          // 턴이 변경되었으면 게임 상태 초기화\n          resetGameState();\n        } else {\n          // 주사위 풀 업데이트 - 서버 상태로 동기화\n          if (gameState.dicePool) {\n            setDicePool(gameState.dicePool);\n          }\n        }\n\n        // 턴 상태 업데이트 (서버에서 받은 경우)\n        if (gameState.currentBrains !== undefined && gameState.currentShotguns !== undefined) {\n          setCurrentBrains(gameState.currentBrains);\n          setCurrentShotguns(gameState.currentShotguns);\n        }\n      };\n\n      // 주사위 풀 업데이트 이벤트 리스너 추가\n      const handleDicePoolUpdated = data => {\n        console.log('주사위 풀 업데이트:', data);\n        if (data.dicePool) {\n          setDicePool(data.dicePool);\n        }\n      };\n      window.socket.on('gameStarted', handleGameStarted);\n      window.socket.on('gameAction', handleGameAction);\n      window.socket.on('gameStateUpdated', handleGameStateUpdated);\n      window.socket.on('turnStatusUpdated', handleTurnStatusUpdated);\n      window.socket.on('dicePoolUpdated', handleDicePoolUpdated);\n      return () => {\n        console.log('소켓 이벤트 리스너 제거');\n        window.socket.off('gameStarted', handleGameStarted);\n        window.socket.off('gameAction', handleGameAction);\n        window.socket.off('gameStateUpdated', handleGameStateUpdated);\n        window.socket.off('turnStatusUpdated', handleTurnStatusUpdated);\n        window.socket.off('dicePoolUpdated', handleDicePoolUpdated);\n      };\n    }\n  }, [currentBrains, currentShotguns, currentTurn, isMyTurn, onTurnEnd]);\n\n  // 컴포넌트 마운트/언마운트 시 상태 초기화 수정\n  useEffect(() => {\n    // 내 턴이 시작될 때만 초기화\n    if (isMyTurn) {\n      // 이전에 내 턴이 아니었다면 초기화\n      if (!prevIsMyTurnRef.current) {\n        resetGameState();\n        pickDice();\n      }\n    }\n\n    // 현재 턴 상태 저장\n    prevIsMyTurnRef.current = isMyTurn;\n  }, [isMyTurn]);\n\n  // 이전 턴 상태 저장용 ref 추가\n  const prevIsMyTurnRef = useRef(false);\n\n  // Three.js를 사용한 주사위 컴포넌트\n  function Dice({\n    type,\n    result,\n    isRolling\n  }) {\n    _s();\n    const diceRef = useRef(null);\n    const animationRef = useRef(null);\n    useEffect(() => {\n      // 이전 캔버스 제거\n      while (diceRef.current && diceRef.current.firstChild) {\n        diceRef.current.removeChild(diceRef.current.firstChild);\n      }\n\n      // 씬 설정\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0xf0f0f0);\n\n      // 카메라 설정\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n      camera.position.z = 2;\n\n      // 렌더러 설정\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(150, 150);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      if (diceRef.current) {\n        diceRef.current.appendChild(renderer.domElement);\n      }\n\n      // 조명 추가\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(1, 1, 1);\n      scene.add(directionalLight);\n\n      // 텍스처 로더 생성\n      const textureLoader = new THREE.TextureLoader();\n\n      // 결과 타입에 따른 면 매핑\n      const resultIndex = DICE_FACES[type].faces.findIndex(face => face.type === result);\n\n      // 주사위 면 순서: +x, -x, +y, -y, +z, -z\n      // 각 면에 맞는 텍스처 매핑\n      const materials = [];\n\n      // 주사위 타입에 따른 면 이미지 설정\n      let brainImage, footstepsImage, shotgunImage;\n      switch (type) {\n        case 'RED':\n          brainImage = redBrain;\n          footstepsImage = redFootsteps;\n          shotgunImage = redShotgun;\n          break;\n        case 'YELLOW':\n          brainImage = yellowBrain;\n          footstepsImage = yellowFootsteps;\n          shotgunImage = yellowShotgun;\n          break;\n        case 'GREEN':\n          brainImage = greenBrain;\n          footstepsImage = greenFootsteps;\n          shotgunImage = greenShotgun;\n          break;\n      }\n\n      // 결과에 따라 위쪽 면 설정\n      let topFaceImage;\n      switch (result) {\n        case 'BRAIN':\n          topFaceImage = brainImage;\n          break;\n        case 'FOOTSTEPS':\n          topFaceImage = footstepsImage;\n          break;\n        case 'SHOTGUN':\n          topFaceImage = shotgunImage;\n          break;\n      }\n\n      // 각 면에 텍스처 적용\n      // 순서: +x, -x, +y, -y, +z(위), -z\n      const faceImages = [brainImage,\n      // +x\n      footstepsImage,\n      // -x\n      shotgunImage,\n      // +y\n      brainImage,\n      // -y\n      topFaceImage,\n      // +z (위쪽 면 - 결과에 따라 변경)\n      footstepsImage // -z\n      ];\n\n      // 각 면에 텍스처 적용\n      faceImages.forEach(image => {\n        const texture = textureLoader.load(image);\n        texture.colorSpace = THREE.SRGBColorSpace;\n        materials.push(new THREE.MeshStandardMaterial({\n          map: texture,\n          roughness: 0.3,\n          metalness: 0.2\n        }));\n      });\n\n      // 주사위 지오메트리 생성\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const dice = new THREE.Mesh(geometry, materials);\n      scene.add(dice);\n\n      // 초기 회전 설정\n      dice.rotation.set(Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI);\n\n      // 애니메이션 함수\n      const animate = () => {\n        animationRef.current = requestAnimationFrame(animate);\n        if (isRolling) {\n          // 굴러가는 애니메이션\n          dice.rotation.x += 0.1;\n          dice.rotation.y += 0.15;\n          dice.rotation.z += 0.05;\n        } else {\n          // 결과에 따른 회전 설정 - 항상 +z 면이 위로 오도록\n          const targetX = 0;\n          const targetY = 0;\n          const targetZ = 0;\n\n          // 부드러운 회전 애니메이션\n          dice.rotation.x += (targetX - dice.rotation.x) * 0.1;\n          dice.rotation.y += (targetY - dice.rotation.y) * 0.1;\n          dice.rotation.z += (targetZ - dice.rotation.z) * 0.1;\n        }\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // 클린업\n      return () => {\n        cancelAnimationFrame(animationRef.current);\n        if (diceRef.current && renderer.domElement) {\n          diceRef.current.removeChild(renderer.domElement);\n        }\n        geometry.dispose();\n        materials.forEach(material => material.dispose());\n        renderer.dispose();\n      };\n    }, [isRolling, result, type]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: diceRef,\n        className: \"dice-3d-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-result-label\",\n        children: [result === 'BRAIN' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"result-brain\",\n          children: \"\\uB1CC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 34\n        }, this), result === 'SHOTGUN' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"result-shotgun\",\n          children: \"\\uCD1D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 36\n        }, this), result === 'FOOTSTEPS' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"result-footsteps\",\n          children: \"\\uBC1C\\uC790\\uAD6D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 주사위 풀 상태 표시 컴포넌트 수정\n  _s(Dice, \"F1LKHxQtkm8Is5hiJbdZTIYH4mI=\");\n  const DicePoolStatus = ({\n    dicePool\n  }) => {\n    // 주사위 색상별 개수 계산\n    const redCount = dicePool.filter(dice => dice === 'RED').length;\n    const yellowCount = dicePool.filter(dice => dice === 'YELLOW').length;\n    const greenCount = dicePool.filter(dice => dice === 'GREEN').length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-pool-status mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"\\uB0A8\\uC740 \\uC8FC\\uC0AC\\uC704:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-pool-counts\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-count red\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dice-color-indicator red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 13\n          }, this), \"\\uBE68\\uAC04\\uC0C9: \", redCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-count yellow\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dice-color-indicator yellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 13\n          }, this), \"\\uB178\\uB780\\uC0C9: \", yellowCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-count green\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dice-color-indicator green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 13\n          }, this), \"\\uCD08\\uB85D\\uC0C9: \", greenCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 7\n    }, this);\n  };\n  if (!isMyTurn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"zombie-dice\",\n      children: [renderScoreBoard(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [players[currentTurn].nickname, \"\\uB2D8\\uC758 \\uCC28\\uB840\\uC785\\uB2C8\\uB2E4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-status mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-around\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uD68D\\uB4DD\\uD55C \\uB1CC: \", currentBrains]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uC0F7\\uAC74 \\uD69F\\uC218: \", currentShotguns, \"/3\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-area mb-3\",\n        children: isRolling ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uC8FC\\uC0AC\\uC704 \\uAD74\\uB9AC\\uB294 \\uC911...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 13\n        }, this) : rolledResults.length > 0 && rolledResults.map((result, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          type: result.type,\n          result: result.result,\n          isRolling: isRolling\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DicePoolStatus, {\n        dicePool: dicePool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"zombie-dice\",\n    children: [renderScoreBoard(), winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uD83C\\uDFC6 \", winner.nickname, \"\\uB2D8\\uC774 \\uC2B9\\uB9AC\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4! \\uD83C\\uDFC6\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"my-turn-indicator\",\n          children: \"\\uB2F9\\uC2E0\\uC758 \\uCC28\\uB840\\uC785\\uB2C8\\uB2E4!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-status mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-around\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uD68D\\uB4DD\\uD55C \\uB1CC: \", currentBrains]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uC0F7\\uAC74 \\uD69F\\uC218: \", currentShotguns, \"/3\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-area mb-3\",\n        children: isRolling ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uC8FC\\uC0AC\\uC704 \\uAD74\\uB9AC\\uB294 \\uC911...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 15\n        }, this) : rolledResults.length > 0 ? rolledResults.map((result, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          type: result.type,\n          result: result.result,\n          isRolling: isRolling\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 19\n        }, this)) : selectedDice.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleRoll,\n          disabled: isRolling,\n          children: \"\\uC8FC\\uC0AC\\uC704 \\uAD74\\uB9AC\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 11\n      }, this), rolledResults.length > 0 && !winner && !isRolling && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success me-2\",\n          onClick: handleContinue,\n          disabled: currentShotguns >= 3,\n          children: \"\\uACC4\\uC18D\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-warning\",\n          onClick: handleStop,\n          children: currentShotguns >= 3 ? \"턴 종료 (0점)\" : \"멈추기\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 13\n      }, this), currentShotguns >= 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uCD1D\\uC774 3\\uAC1C \\uC774\\uC0C1!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 15\n        }, this), \" \\uC774\\uBC88 \\uD134\\uC5D0 \\uD68D\\uB4DD\\uD55C \\uB1CC\\uB97C \\uBAA8\\uB450 \\uC783\\uC5C8\\uC2B5\\uB2C8\\uB2E4. \\uD134\\uC744 \\uC885\\uB8CC\\uD574\\uC8FC\\uC138\\uC694.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DicePoolStatus, {\n        dicePool: dicePool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 709,\n    columnNumber: 5\n  }, this);\n}\n_s2(ZombieDice, \"/lB4uy62UvWlacKXp2IqmVes7I4=\");\n_c = ZombieDice;\nexport default ZombieDice;\nvar _c;\n$RefreshReg$(_c, \"ZombieDice\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","THREE","GLTFLoader","redBrain","redFootsteps","redShotgun","yellowBrain","yellowFootsteps","yellowShotgun","greenBrain","greenFootsteps","greenShotgun","jsxDEV","_jsxDEV","Fragment","_Fragment","WINNING_SCORE","DICE_FACES","RED","faces","image","type","YELLOW","GREEN","ZombieDice","players","currentTurn","onTurnEnd","isMyTurn","_s2","_s","$RefreshSig$","dicePool","setDicePool","Array","fill","selectedDice","setSelectedDice","rolledResults","setRolledResults","currentBrains","setCurrentBrains","currentShotguns","setCurrentShotguns","keptDice","setKeptDice","isRolling","setIsRolling","diceContainerRef","length","pickDice","console","log","newDice","tempPool","error","i","randomIndex","Math","floor","random","push","splice","roomId","window","location","pathname","split","socket","emit","handleRoll","rollDiceWithSelected","processResults","results","newBrains","newShotguns","forEach","result","resetGameState","initialDicePool","handleStop","finalScore","score","handleContinue","footstepsDice","filter","map","newSelectedDice","diceType","index","indexOf","allDiceToRoll","nonFootstepsResults","setTimeout","selectedDiceToRoll","currentPool","action","renderScoreBoard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","player","nickname","winner","find","handleGameStarted","data","gameState","handleGameAction","validDicePool","dice","handleTurnStatusUpdated","handleGameStateUpdated","isMyTurnChanged","undefined","handleDicePoolUpdated","on","off","prevIsMyTurnRef","current","Dice","diceRef","animationRef","firstChild","removeChild","scene","Scene","background","Color","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","textureLoader","TextureLoader","resultIndex","findIndex","face","materials","brainImage","footstepsImage","shotgunImage","topFaceImage","faceImages","texture","load","colorSpace","SRGBColorSpace","MeshStandardMaterial","roughness","metalness","geometry","BoxGeometry","Mesh","rotation","PI","animate","requestAnimationFrame","x","y","targetX","targetY","targetZ","render","cancelAnimationFrame","dispose","material","ref","DicePoolStatus","redCount","yellowCount","greenCount","onClick","disabled","_c","$RefreshReg$"],"sources":["F:/Workspace/Cursor/game/frontend/src/components/games/ZombieDice.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport redBrain from '../../assets/zombie-dice/faces/red-brain.png';\r\nimport redFootsteps from '../../assets/zombie-dice/faces/red-footsteps.png';\r\nimport redShotgun from '../../assets/zombie-dice/faces/red-shotgun.png';\r\nimport yellowBrain from '../../assets/zombie-dice/faces/yellow-brain.png';\r\nimport yellowFootsteps from '../../assets/zombie-dice/faces/yellow-footsteps.png';\r\nimport yellowShotgun from '../../assets/zombie-dice/faces/yellow-shotgun.png';\r\nimport greenBrain from '../../assets/zombie-dice/faces/green-brain.png';\r\nimport greenFootsteps from '../../assets/zombie-dice/faces/green-footsteps.png';\r\nimport greenShotgun from '../../assets/zombie-dice/faces/green-shotgun.png';\r\nimport '../styles/ZombieDice.css';\r\n\r\n// 승리 점수\r\nconst WINNING_SCORE = 13;\r\n\r\n// 주사위 면 정의\r\nconst DICE_FACES = {\r\n  RED: {\r\n    faces: [\r\n      { image: redBrain, type: 'BRAIN' },      // 1면\r\n      { image: redFootsteps, type: 'FOOTSTEPS' }, // 2면\r\n      { image: redFootsteps, type: 'FOOTSTEPS' }, // 3면\r\n      { image: redShotgun, type: 'SHOTGUN' },   // 4면\r\n      { image: redShotgun, type: 'SHOTGUN' },   // 5면\r\n      { image: redShotgun, type: 'SHOTGUN' }    // 6면\r\n    ]\r\n  },\r\n  YELLOW: {\r\n    faces: [\r\n      { image: yellowBrain, type: 'BRAIN' },     // 1면\r\n      { image: yellowBrain, type: 'BRAIN' },     // 2면\r\n      { image: yellowFootsteps, type: 'FOOTSTEPS' }, // 3면\r\n      { image: yellowFootsteps, type: 'FOOTSTEPS' }, // 4면\r\n      { image: yellowShotgun, type: 'SHOTGUN' },  // 5면\r\n      { image: yellowShotgun, type: 'SHOTGUN' }   // 6면\r\n    ]\r\n  },\r\n  GREEN: {\r\n    faces: [\r\n      { image: greenBrain, type: 'BRAIN' },     // 1면\r\n      { image: greenBrain, type: 'BRAIN' },     // 2면\r\n      { image: greenBrain, type: 'BRAIN' },     // 3면\r\n      { image: greenFootsteps, type: 'FOOTSTEPS' }, // 4면\r\n      { image: greenFootsteps, type: 'FOOTSTEPS' }, // 5면\r\n      { image: greenShotgun, type: 'SHOTGUN' }   // 6면\r\n    ]\r\n  }\r\n};\r\n\r\nfunction ZombieDice({ players, currentTurn, onTurnEnd, isMyTurn }) {\r\n  const [dicePool, setDicePool] = useState([\r\n    ...Array(3).fill('RED'),\r\n    ...Array(4).fill('YELLOW'),\r\n    ...Array(6).fill('GREEN')\r\n  ]);\r\n  const [selectedDice, setSelectedDice] = useState([]);\r\n  const [rolledResults, setRolledResults] = useState([]);\r\n  const [currentBrains, setCurrentBrains] = useState(0);\r\n  const [currentShotguns, setCurrentShotguns] = useState(0);\r\n  const [keptDice, setKeptDice] = useState([]);\r\n  const [isRolling, setIsRolling] = useState(false);\r\n  const diceContainerRef = useRef(null);\r\n\r\n  // 컴포넌트 마운트 시 주사위 선택\r\n  useEffect(() => {\r\n    if (isMyTurn && rolledResults.length === 0 && selectedDice.length === 0) {\r\n      // 내 턴이 시작되면 자동으로 주사위 3개 선택\r\n      pickDice();\r\n    }\r\n  }, [isMyTurn, rolledResults.length, selectedDice.length]);\r\n\r\n  // 주사위 3개 랜덤 선택 함수 수정\r\n  const pickDice = () => {\r\n    console.log('주사위 선택 시작, 현재 풀:', dicePool);\r\n    \r\n    const newDice = [];\r\n    const tempPool = [...dicePool];\r\n    \r\n    // 풀이 비어있으면 초기화하지 않고 로그만 출력\r\n    if (tempPool.length < 3) {\r\n      console.error('주사위 풀이 부족합니다:', tempPool);\r\n      return;\r\n    }\r\n    \r\n    for (let i = 0; i < 3; i++) {\r\n      if (tempPool.length === 0) break;\r\n      const randomIndex = Math.floor(Math.random() * tempPool.length);\r\n      newDice.push(tempPool[randomIndex]);\r\n      tempPool.splice(randomIndex, 1);\r\n    }\r\n    \r\n    console.log('선택된 주사위:', newDice);\r\n    console.log('남은 풀:', tempPool);\r\n    \r\n    // 주사위 풀 업데이트\r\n    setDicePool(tempPool);\r\n    setSelectedDice(newDice);\r\n    \r\n    // 주사위 풀 상태를 서버에 전송\r\n    const roomId = window.location.pathname.split('/')[2];\r\n    window.socket.emit('updateDicePool', {\r\n      roomId,\r\n      dicePool: tempPool\r\n    });\r\n  };\r\n\r\n  // 주사위 굴리기\r\n  const handleRoll = () => {\r\n    rollDiceWithSelected(selectedDice, dicePool);\r\n  };\r\n\r\n  // 결과 처리 함수 수정\r\n  const processResults = (results) => {\r\n    // 결과 계산 - 이전 값에 누적\r\n    let newBrains = currentBrains;\r\n    let newShotguns = currentShotguns;\r\n    \r\n    results.forEach(({ result, type }) => {\r\n      if (result === 'BRAIN') newBrains++;\r\n      if (result === 'SHOTGUN') newShotguns++;\r\n      // 발자국은 처리하지 않음\r\n    });\r\n\r\n    // 상태 업데이트\r\n    setCurrentBrains(newBrains);\r\n    setCurrentShotguns(newShotguns);\r\n    \r\n    // 샷건이 3개 이상이면 자동 턴 종료 제거\r\n    // 대신 UI에서 계속하기 버튼 비활성화 처리\r\n  };\r\n\r\n  // 게임 상태 초기화 함수 수정\r\n  const resetGameState = () => {\r\n    console.log('게임 상태 초기화');\r\n    // 주사위 풀 초기화 - 정확한 개수로 설정\r\n    const initialDicePool = [\r\n      ...Array(3).fill('RED'),\r\n      ...Array(4).fill('YELLOW'),\r\n      ...Array(6).fill('GREEN')\r\n    ];\r\n    setDicePool(initialDicePool);\r\n    setCurrentBrains(0);\r\n    setCurrentShotguns(0);\r\n    setRolledResults([]);\r\n    setSelectedDice([]);\r\n    \r\n    // 주사위 풀 초기화를 서버에 알림\r\n    if (window.socket) {\r\n      const roomId = window.location.pathname.split('/')[2];\r\n      window.socket.emit('updateDicePool', {\r\n        roomId,\r\n        dicePool: initialDicePool\r\n      });\r\n    }\r\n  };\r\n\r\n  // 턴 종료 함수 수정\r\n  const handleStop = () => {\r\n    // 샷건이 3개 이상이면 점수 0으로 처리\r\n    const finalScore = currentShotguns >= 3 ? 0 : currentBrains;\r\n    \r\n    // Room 컴포넌트에서 roomId 가져오기\r\n    const roomId = window.location.pathname.split('/')[2]; // URL에서 roomId 추출\r\n    \r\n    console.log('턴 종료 요청 전송:', {\r\n      roomId,\r\n      score: finalScore\r\n    });\r\n    \r\n    // 서버에 턴 종료 요청 전송\r\n    if (window.socket) {\r\n      window.socket.emit('endTurn', {\r\n        roomId,\r\n        score: finalScore\r\n      });\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n    }\r\n    \r\n    // 로컬 콜백 호출 (Room 컴포넌트에 알림)\r\n    onTurnEnd(finalScore);\r\n  };\r\n\r\n  // 계속 진행 함수 수정\r\n  const handleContinue = () => {\r\n    // 도망간 주사위 찾기\r\n    const footstepsDice = rolledResults\r\n      .filter(result => result.result === 'FOOTSTEPS')\r\n      .map(result => result.type);\r\n    \r\n    // 새로운 주사위 3개 선택\r\n    const newSelectedDice = [];\r\n    let tempPool = [...dicePool];\r\n    \r\n    // 주사위 풀이 3개 이하인 경우 풀 초기화\r\n    if (tempPool.length < 3) {\r\n      console.log('주사위 풀 부족, 풀 초기화');\r\n      \r\n      // 주사위 풀 초기화\r\n      tempPool = [\r\n        ...Array(3).fill('RED'),\r\n        ...Array(4).fill('YELLOW'),\r\n        ...Array(6).fill('GREEN')\r\n      ];\r\n      \r\n      // 도망간 주사위 제외\r\n      footstepsDice.forEach(diceType => {\r\n        const index = tempPool.indexOf(diceType);\r\n        if (index !== -1) {\r\n          tempPool.splice(index, 1);\r\n        }\r\n      });\r\n    }\r\n    \r\n    // 3개의 새 주사위 선택\r\n    for (let i = 0; i < 3; i++) {\r\n      if (tempPool.length === 0) break;\r\n      const randomIndex = Math.floor(Math.random() * tempPool.length);\r\n      newSelectedDice.push(tempPool[randomIndex]);\r\n      tempPool.splice(randomIndex, 1);\r\n    }\r\n    \r\n    // 도망간 주사위와 새 주사위 합치기\r\n    const allDiceToRoll = [...footstepsDice, ...newSelectedDice];\r\n    \r\n    // 주사위 풀 업데이트\r\n    setDicePool(tempPool);\r\n    \r\n    // 주사위 풀 상태를 서버에 전송\r\n    window.socket.emit('updateDicePool', {\r\n      roomId: window.location.pathname.split('/')[2],\r\n      dicePool: tempPool\r\n    });\r\n    \r\n    // 이전 결과에서 도망이 아닌 주사위만 유지\r\n    const nonFootstepsResults = rolledResults.filter(result => result.result !== 'FOOTSTEPS');\r\n    setRolledResults(nonFootstepsResults);\r\n    \r\n    // 즉시 주사위 굴리기\r\n    setTimeout(() => {\r\n      rollDiceWithSelected(allDiceToRoll, tempPool);\r\n    }, 100);\r\n  };\r\n\r\n  // 주사위 굴리기 함수 수정\r\n  const rollDiceWithSelected = (selectedDiceToRoll, currentPool) => {\r\n    console.log('주사위 굴리기 시작, 선택된 주사위:', selectedDiceToRoll);\r\n    console.log('현재 풀:', currentPool);\r\n    \r\n    setIsRolling(true);\r\n    \r\n    // 서버에 주사위 굴리기 요청\r\n    if (window.socket) {\r\n      // Room 컴포넌트에서 roomId 가져오기\r\n      const roomId = window.location.pathname.split('/')[2]; // URL에서 roomId 추출\r\n      \r\n      console.log('주사위 굴리기 요청 전송:', {\r\n        action: 'rollDice',\r\n        roomId,\r\n        selectedDice: selectedDiceToRoll,\r\n        dicePool: currentPool\r\n      });\r\n      \r\n      window.socket.emit('gameAction', {\r\n        action: 'rollDice',\r\n        roomId,\r\n        selectedDice: selectedDiceToRoll,\r\n        dicePool: currentPool\r\n      });\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n      setIsRolling(false);\r\n    }\r\n    \r\n    // 서버 응답이 없을 경우를 대비한 타임아웃\r\n    setTimeout(() => {\r\n      if (isRolling) {\r\n        console.error('서버 응답 타임아웃');\r\n        setIsRolling(false);\r\n      }\r\n    }, 5000);\r\n  };\r\n\r\n  // 점수판 렌더링\r\n  const renderScoreBoard = () => (\r\n    <div className=\"score-board\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>플레이어</th>\r\n            <th>점수</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {players.map((player, index) => (\r\n            <tr \r\n              key={player.nickname}\r\n              className={index === currentTurn ? 'current-player' : ''}\r\n            >\r\n              <td>{player.nickname}</td>\r\n              <td>{player.score}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n\r\n  // 승자가 있는지 확인\r\n  const winner = players.find(player => player.score >= WINNING_SCORE);\r\n\r\n  // 소켓 이벤트 리스너 수정\r\n  useEffect(() => {\r\n    if (window.socket) {\r\n      console.log('소켓 이벤트 리스너 등록');\r\n      \r\n      // 게임 시작 이벤트 리스너 추가\r\n      const handleGameStarted = (data) => {\r\n        console.log('게임 시작:', data);\r\n        \r\n        // 게임 시작 시 주사위 풀 초기화 - 서버에서 받은 값으로 설정\r\n        if (data.gameState && data.gameState.dicePool) {\r\n          setDicePool(data.gameState.dicePool);\r\n        } else {\r\n          // 서버에서 받은 값이 없으면 기본값으로 설정\r\n          const initialDicePool = [\r\n            ...Array(3).fill('RED'),\r\n            ...Array(4).fill('YELLOW'),\r\n            ...Array(6).fill('GREEN')\r\n          ];\r\n          setDicePool(initialDicePool);\r\n        }\r\n        \r\n        setCurrentBrains(0);\r\n        setCurrentShotguns(0);\r\n        setRolledResults([]);\r\n        setSelectedDice([]);\r\n      };\r\n      \r\n      // 주사위 굴리기 결과 수신 이벤트 리스너 추가\r\n      const handleGameAction = (data) => {\r\n        console.log('게임 액션 수신:', data);\r\n        \r\n        if (data.action === 'rollDice') {\r\n          console.log('주사위 결과 수신:', data.results);\r\n          \r\n          // 결과 표시 - 새 결과로 설정\r\n          setRolledResults(data.results);\r\n          setIsRolling(true); // 모든 플레이어에게 굴리는 애니메이션 표시\r\n          \r\n          // 주사위 풀 업데이트 - 모든 플레이어에게 동일하게 적용\r\n          if (data.dicePool) {\r\n            // 주사위 풀에 주사위 색상만 저장되도록 확인\r\n            const validDicePool = data.dicePool.filter(dice => \r\n              dice === 'RED' || dice === 'YELLOW' || dice === 'GREEN'\r\n            );\r\n            setDicePool(validDicePool);\r\n          }\r\n          \r\n          // 애니메이션 후 결과 처리 - 모든 플레이어에게 동일한 시간 적용\r\n          setTimeout(() => {\r\n            // 내 턴일 때만 결과 처리 (점수 누적)\r\n            if (isMyTurn) {\r\n              // 결과 처리 - 뇌와 샷건 개수 누적\r\n              let newBrains = currentBrains;\r\n              let newShotguns = currentShotguns;\r\n              \r\n              data.results.forEach(({ result }) => {\r\n                if (result === 'BRAIN') newBrains++;\r\n                if (result === 'SHOTGUN') newShotguns++;\r\n              });\r\n              \r\n              // 상태 업데이트\r\n              setCurrentBrains(newBrains);\r\n              setCurrentShotguns(newShotguns);\r\n              \r\n              // 현재 상태를 서버에 전송하여 다른 플레이어들에게도 업데이트\r\n              window.socket.emit('updateTurnStatus', {\r\n                roomId: window.location.pathname.split('/')[2],\r\n                currentBrains: newBrains,\r\n                currentShotguns: newShotguns,\r\n                dicePool: data.dicePool // 주사위 풀도 함께 전송\r\n              });\r\n            }\r\n            \r\n            setIsRolling(false);\r\n          }, 2500); // 모든 플레이어에게 동일한 애니메이션 시간 적용\r\n        }\r\n      };\r\n      \r\n      // 턴 상태 업데이트 이벤트 리스너 추가\r\n      const handleTurnStatusUpdated = (data) => {\r\n        console.log('턴 상태 업데이트:', data);\r\n        \r\n        // 내 턴이 아닐 때만 상태 업데이트 (내 턴일 때는 이미 로컬에서 처리됨)\r\n        if (!isMyTurn) {\r\n          setCurrentBrains(data.currentBrains);\r\n          setCurrentShotguns(data.currentShotguns);\r\n          \r\n          // 주사위 풀 업데이트\r\n          if (data.dicePool) {\r\n            setDicePool(data.dicePool);\r\n          }\r\n        }\r\n      };\r\n      \r\n      // 게임 상태 업데이트 이벤트 리스너 수정\r\n      const handleGameStateUpdated = (gameState) => {\r\n        console.log('게임 상태 업데이트:', gameState);\r\n        \r\n        // 현재 턴이 변경되었는지 확인\r\n        const isMyTurnChanged = gameState.currentTurn !== currentTurn;\r\n        \r\n        if (isMyTurnChanged) {\r\n          // 턴이 변경되었으면 게임 상태 초기화\r\n          resetGameState();\r\n        } else {\r\n          // 주사위 풀 업데이트 - 서버 상태로 동기화\r\n          if (gameState.dicePool) {\r\n            setDicePool(gameState.dicePool);\r\n          }\r\n        }\r\n        \r\n        // 턴 상태 업데이트 (서버에서 받은 경우)\r\n        if (gameState.currentBrains !== undefined && gameState.currentShotguns !== undefined) {\r\n          setCurrentBrains(gameState.currentBrains);\r\n          setCurrentShotguns(gameState.currentShotguns);\r\n        }\r\n      };\r\n      \r\n      // 주사위 풀 업데이트 이벤트 리스너 추가\r\n      const handleDicePoolUpdated = (data) => {\r\n        console.log('주사위 풀 업데이트:', data);\r\n        \r\n        if (data.dicePool) {\r\n          setDicePool(data.dicePool);\r\n        }\r\n      };\r\n      \r\n      window.socket.on('gameStarted', handleGameStarted);\r\n      window.socket.on('gameAction', handleGameAction);\r\n      window.socket.on('gameStateUpdated', handleGameStateUpdated);\r\n      window.socket.on('turnStatusUpdated', handleTurnStatusUpdated);\r\n      window.socket.on('dicePoolUpdated', handleDicePoolUpdated);\r\n      \r\n      return () => {\r\n        console.log('소켓 이벤트 리스너 제거');\r\n        window.socket.off('gameStarted', handleGameStarted);\r\n        window.socket.off('gameAction', handleGameAction);\r\n        window.socket.off('gameStateUpdated', handleGameStateUpdated);\r\n        window.socket.off('turnStatusUpdated', handleTurnStatusUpdated);\r\n        window.socket.off('dicePoolUpdated', handleDicePoolUpdated);\r\n      };\r\n    }\r\n  }, [currentBrains, currentShotguns, currentTurn, isMyTurn, onTurnEnd]);\r\n\r\n  // 컴포넌트 마운트/언마운트 시 상태 초기화 수정\r\n  useEffect(() => {\r\n    // 내 턴이 시작될 때만 초기화\r\n    if (isMyTurn) {\r\n      // 이전에 내 턴이 아니었다면 초기화\r\n      if (!prevIsMyTurnRef.current) {\r\n        resetGameState();\r\n        pickDice();\r\n      }\r\n    }\r\n    \r\n    // 현재 턴 상태 저장\r\n    prevIsMyTurnRef.current = isMyTurn;\r\n  }, [isMyTurn]);\r\n\r\n  // 이전 턴 상태 저장용 ref 추가\r\n  const prevIsMyTurnRef = useRef(false);\r\n\r\n  // Three.js를 사용한 주사위 컴포넌트\r\n  function Dice({ type, result, isRolling }) {\r\n    const diceRef = useRef(null);\r\n    const animationRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n      // 이전 캔버스 제거\r\n      while (diceRef.current && diceRef.current.firstChild) {\r\n        diceRef.current.removeChild(diceRef.current.firstChild);\r\n      }\r\n\r\n      // 씬 설정\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0xf0f0f0);\r\n      \r\n      // 카메라 설정\r\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n      camera.position.z = 2;\r\n      \r\n      // 렌더러 설정\r\n      const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n      renderer.setSize(150, 150);\r\n      renderer.setPixelRatio(window.devicePixelRatio);\r\n      if (diceRef.current) {\r\n        diceRef.current.appendChild(renderer.domElement);\r\n      }\r\n\r\n      // 조명 추가\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n      scene.add(ambientLight);\r\n      \r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n      directionalLight.position.set(1, 1, 1);\r\n      scene.add(directionalLight);\r\n\r\n      // 텍스처 로더 생성\r\n      const textureLoader = new THREE.TextureLoader();\r\n      \r\n      // 결과 타입에 따른 면 매핑\r\n      const resultIndex = DICE_FACES[type].faces.findIndex(face => face.type === result);\r\n      \r\n      // 주사위 면 순서: +x, -x, +y, -y, +z, -z\r\n      // 각 면에 맞는 텍스처 매핑\r\n      const materials = [];\r\n      \r\n      // 주사위 타입에 따른 면 이미지 설정\r\n      let brainImage, footstepsImage, shotgunImage;\r\n      \r\n      switch(type) {\r\n        case 'RED':\r\n          brainImage = redBrain;\r\n          footstepsImage = redFootsteps;\r\n          shotgunImage = redShotgun;\r\n          break;\r\n        case 'YELLOW':\r\n          brainImage = yellowBrain;\r\n          footstepsImage = yellowFootsteps;\r\n          shotgunImage = yellowShotgun;\r\n          break;\r\n        case 'GREEN':\r\n          brainImage = greenBrain;\r\n          footstepsImage = greenFootsteps;\r\n          shotgunImage = greenShotgun;\r\n          break;\r\n      }\r\n      \r\n      // 결과에 따라 위쪽 면 설정\r\n      let topFaceImage;\r\n      switch(result) {\r\n        case 'BRAIN':\r\n          topFaceImage = brainImage;\r\n          break;\r\n        case 'FOOTSTEPS':\r\n          topFaceImage = footstepsImage;\r\n          break;\r\n        case 'SHOTGUN':\r\n          topFaceImage = shotgunImage;\r\n          break;\r\n      }\r\n      \r\n      // 각 면에 텍스처 적용\r\n      // 순서: +x, -x, +y, -y, +z(위), -z\r\n      const faceImages = [\r\n        brainImage,       // +x\r\n        footstepsImage,   // -x\r\n        shotgunImage,     // +y\r\n        brainImage,       // -y\r\n        topFaceImage,     // +z (위쪽 면 - 결과에 따라 변경)\r\n        footstepsImage    // -z\r\n      ];\r\n      \r\n      // 각 면에 텍스처 적용\r\n      faceImages.forEach(image => {\r\n        const texture = textureLoader.load(image);\r\n        texture.colorSpace = THREE.SRGBColorSpace;\r\n        materials.push(new THREE.MeshStandardMaterial({ \r\n          map: texture,\r\n          roughness: 0.3,\r\n          metalness: 0.2\r\n        }));\r\n      });\r\n      \r\n      // 주사위 지오메트리 생성\r\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n      const dice = new THREE.Mesh(geometry, materials);\r\n      scene.add(dice);\r\n      \r\n      // 초기 회전 설정\r\n      dice.rotation.set(\r\n        Math.random() * Math.PI,\r\n        Math.random() * Math.PI,\r\n        Math.random() * Math.PI\r\n      );\r\n      \r\n      // 애니메이션 함수\r\n      const animate = () => {\r\n        animationRef.current = requestAnimationFrame(animate);\r\n        \r\n        if (isRolling) {\r\n          // 굴러가는 애니메이션\r\n          dice.rotation.x += 0.1;\r\n          dice.rotation.y += 0.15;\r\n          dice.rotation.z += 0.05;\r\n        } else {\r\n          // 결과에 따른 회전 설정 - 항상 +z 면이 위로 오도록\r\n          const targetX = 0;\r\n          const targetY = 0;\r\n          const targetZ = 0;\r\n          \r\n          // 부드러운 회전 애니메이션\r\n          dice.rotation.x += (targetX - dice.rotation.x) * 0.1;\r\n          dice.rotation.y += (targetY - dice.rotation.y) * 0.1;\r\n          dice.rotation.z += (targetZ - dice.rotation.z) * 0.1;\r\n        }\r\n        \r\n        renderer.render(scene, camera);\r\n      };\r\n      \r\n      animate();\r\n      \r\n      // 클린업\r\n      return () => {\r\n        cancelAnimationFrame(animationRef.current);\r\n        if (diceRef.current && renderer.domElement) {\r\n          diceRef.current.removeChild(renderer.domElement);\r\n        }\r\n        geometry.dispose();\r\n        materials.forEach(material => material.dispose());\r\n        renderer.dispose();\r\n      };\r\n    }, [isRolling, result, type]);\r\n    \r\n    return (\r\n      <div className=\"dice-result-container\">\r\n        <div ref={diceRef} className=\"dice-3d-container\"></div>\r\n        <div className=\"dice-result-label\">\r\n          {result === 'BRAIN' && <span className=\"result-brain\">뇌</span>}\r\n          {result === 'SHOTGUN' && <span className=\"result-shotgun\">총</span>}\r\n          {result === 'FOOTSTEPS' && <span className=\"result-footsteps\">발자국</span>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 주사위 풀 상태 표시 컴포넌트 수정\r\n  const DicePoolStatus = ({ dicePool }) => {\r\n    // 주사위 색상별 개수 계산\r\n    const redCount = dicePool.filter(dice => dice === 'RED').length;\r\n    const yellowCount = dicePool.filter(dice => dice === 'YELLOW').length;\r\n    const greenCount = dicePool.filter(dice => dice === 'GREEN').length;\r\n    \r\n    return (\r\n      <div className=\"dice-pool-status mt-3\">\r\n        <h5>남은 주사위:</h5>\r\n        <div className=\"dice-pool-counts\">\r\n          <div className=\"dice-count red\">\r\n            <span className=\"dice-color-indicator red\"></span>\r\n            빨간색: {redCount}개\r\n          </div>\r\n          <div className=\"dice-count yellow\">\r\n            <span className=\"dice-color-indicator yellow\"></span>\r\n            노란색: {yellowCount}개\r\n          </div>\r\n          <div className=\"dice-count green\">\r\n            <span className=\"dice-color-indicator green\"></span>\r\n            초록색: {greenCount}개\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (!isMyTurn) {\r\n    return (\r\n      <div className=\"zombie-dice\">\r\n        {renderScoreBoard()}\r\n        <div className=\"text-center mb-3\">\r\n          <h3>{players[currentTurn].nickname}님의 차례입니다</h3>\r\n        </div>\r\n        \r\n        <div className=\"current-status mb-3\">\r\n          <div className=\"d-flex justify-content-around\">\r\n            <div>획득한 뇌: {currentBrains}</div>\r\n            <div>샷건 횟수: {currentShotguns}/3</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"dice-area mb-3\">\r\n          {isRolling ? (\r\n            <div className=\"text-center\">\r\n              <p>주사위 굴리는 중...</p>\r\n            </div>\r\n          ) : (\r\n            rolledResults.length > 0 && (\r\n              rolledResults.map((result, index) => (\r\n                <Dice \r\n                  key={index}\r\n                  type={result.type}\r\n                  result={result.result}\r\n                  isRolling={isRolling}\r\n                />\r\n              ))\r\n            )\r\n          )}\r\n        </div>\r\n\r\n        <DicePoolStatus dicePool={dicePool} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"zombie-dice\">\r\n      {renderScoreBoard()}\r\n      \r\n      {winner ? (\r\n        <div className=\"alert alert-success text-center\">\r\n          <h3>🏆 {winner.nickname}님이 승리하셨습니다! 🏆</h3>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"text-center mb-3\">\r\n            <h3 className=\"my-turn-indicator\">당신의 차례입니다!</h3>\r\n          </div>\r\n          \r\n          <div className=\"current-status mb-3\">\r\n            <div className=\"d-flex justify-content-around\">\r\n              <div>획득한 뇌: {currentBrains}</div>\r\n              <div>샷건 횟수: {currentShotguns}/3</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"dice-area mb-3\">\r\n            {isRolling ? (\r\n              <div className=\"text-center\">\r\n                <p>주사위 굴리는 중...</p>\r\n              </div>\r\n            ) : (\r\n              rolledResults.length > 0 ? (\r\n                rolledResults.map((result, index) => (\r\n                  <Dice \r\n                    key={index}\r\n                    type={result.type}\r\n                    result={result.result}\r\n                    isRolling={isRolling}\r\n                  />\r\n                ))\r\n              ) : (\r\n                selectedDice.length > 0 && (\r\n                  <button \r\n                    className=\"btn btn-primary\"\r\n                    onClick={handleRoll}\r\n                    disabled={isRolling}\r\n                  >\r\n                    주사위 굴리기\r\n                  </button>\r\n                )\r\n              )\r\n            )}\r\n          </div>\r\n\r\n          {rolledResults.length > 0 && !winner && !isRolling && (\r\n            <div className=\"controls\">\r\n              <button \r\n                className=\"btn btn-success me-2\"\r\n                onClick={handleContinue}\r\n                disabled={currentShotguns >= 3}\r\n              >\r\n                계속하기\r\n              </button>\r\n              <button \r\n                className=\"btn btn-warning\"\r\n                onClick={handleStop}\r\n              >\r\n                {currentShotguns >= 3 ? \"턴 종료 (0점)\" : \"멈추기\"}\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {currentShotguns >= 3 && (\r\n            <div className=\"alert alert-danger mt-3\">\r\n              <strong>총이 3개 이상!</strong> 이번 턴에 획득한 뇌를 모두 잃었습니다. 턴을 종료해주세요.\r\n            </div>\r\n          )}\r\n          \r\n          <DicePoolStatus dicePool={dicePool} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ZombieDice;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
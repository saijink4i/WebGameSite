{"ast":null,"code":"var _jsxFileName = \"F:\\\\Workspace\\\\Cursor\\\\game\\\\frontend\\\\src\\\\components\\\\games\\\\ZombieDice.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useState, useEffect, useRef, Suspense } from 'react';\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\nimport { Physics, useBox, usePlane } from '@react-three/cannon';\nimport * as THREE from 'three';\nimport { TextureLoader } from 'three';\nimport redBrain from '../../assets/zombie-dice/faces/red-brain.png';\nimport redFootsteps from '../../assets/zombie-dice/faces/red-footsteps.png';\nimport redShotgun from '../../assets/zombie-dice/faces/red-shotgun.png';\nimport yellowBrain from '../../assets/zombie-dice/faces/yellow-brain.png';\nimport yellowFootsteps from '../../assets/zombie-dice/faces/yellow-footsteps.png';\nimport yellowShotgun from '../../assets/zombie-dice/faces/yellow-shotgun.png';\nimport greenBrain from '../../assets/zombie-dice/faces/green-brain.png';\nimport greenFootsteps from '../../assets/zombie-dice/faces/green-footsteps.png';\nimport greenShotgun from '../../assets/zombie-dice/faces/green-shotgun.png';\nimport '../styles/ZombieDice.css';\n\n// 승리 점수\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WINNING_SCORE = 13;\n\n// 주사위 면 정의\nconst DICE_FACES = {\n  RED: {\n    faces: [{\n      image: redBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: redFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 2면\n    {\n      image: redFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 3면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    },\n    // 4면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    },\n    // 5면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  },\n  YELLOW: {\n    faces: [{\n      image: yellowBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: yellowBrain,\n      type: 'BRAIN'\n    },\n    // 2면\n    {\n      image: yellowFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 3면\n    {\n      image: yellowFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 4면\n    {\n      image: yellowShotgun,\n      type: 'SHOTGUN'\n    },\n    // 5면\n    {\n      image: yellowShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  },\n  GREEN: {\n    faces: [{\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 2면\n    {\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 3면\n    {\n      image: greenFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 4면\n    {\n      image: greenFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 5면\n    {\n      image: greenShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  }\n};\n\n// 바닥 컴포넌트\nconst Floor = () => {\n  _s();\n  const [ref] = usePlane(() => ({\n    rotation: [-Math.PI / 2, 0, 0],\n    position: [0, -2, 0],\n    type: 'Static'\n  }));\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: ref,\n    receiveShadow: true,\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [20, 20]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shadowMaterial\", {\n      color: \"#171717\",\n      transparent: true,\n      opacity: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n// 물리 기반 주사위 컴포넌트\n_s(Floor, \"ZXiOMq8W1xHEoXd0svPT/ZkHa4A=\", false, function () {\n  return [usePlane];\n});\n_c = Floor;\nconst PhysicalDice = ({\n  type,\n  result,\n  isRolling,\n  onAnimationComplete\n}) => {\n  _s2();\n  const [ref, api] = useBox(() => ({\n    mass: 1,\n    position: [0, 5, 0],\n    rotation: [Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI],\n    args: [1, 1, 1],\n    allowSleep: true,\n    sleepSpeedLimit: 0.1,\n    sleepTimeLimit: 1\n  }));\n\n  // 텍스처 로드\n  const textures = useLoader(TextureLoader, getTexturesForType(type));\n\n  // 주사위 색상 설정\n  const diceColor = getDiceColor(type);\n\n  // 주사위 굴리기 효과\n  useEffect(() => {\n    if (isRolling) {\n      // 주사위 위치 초기화\n      api.position.set(0, 5, 0);\n\n      // 랜덤한 힘과 회전으로 주사위 던지기\n      api.velocity.set((Math.random() - 0.5) * 5, 3 + Math.random() * 2, (Math.random() - 0.5) * 5);\n      api.angularVelocity.set(Math.random() * 10 - 5, Math.random() * 10 - 5, Math.random() * 10 - 5);\n\n      // 애니메이션 완료 타이머 설정\n      const timer = setTimeout(() => {\n        if (onAnimationComplete) {\n          onAnimationComplete();\n        }\n      }, 2000); // 2초 후 애니메이션 완료\n\n      return () => clearTimeout(timer);\n    }\n  }, [isRolling, api, onAnimationComplete]);\n\n  // 주사위 회전 상태 모니터링\n  const [rotation, setRotation] = useState([0, 0, 0]);\n  const [sleeping, setSleeping] = useState(false);\n  useFrame(() => {\n    // 주사위 회전 상태 업데이트\n    api.rotation.get(setRotation);\n\n    // 주사위가 멈췄는지 확인\n    if (!sleeping) {\n      api.velocity.get(vel => {\n        const speed = Math.sqrt(vel[0] ** 2 + vel[1] ** 2 + vel[2] ** 2);\n        if (speed < 0.1) {\n          setSleeping(true);\n\n          // 결과에 맞게 주사위 회전 조정\n          adjustDiceRotation(result, api);\n        }\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: ref,\n    castShadow: true,\n    receiveShadow: true,\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      attachArray: \"material\",\n      map: textures[0],\n      color: diceColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      attachArray: \"material\",\n      map: textures[1],\n      color: diceColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      attachArray: \"material\",\n      map: textures[2],\n      color: diceColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      attachArray: \"material\",\n      map: textures[3],\n      color: diceColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      attachArray: \"material\",\n      map: textures[4],\n      color: diceColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      attachArray: \"material\",\n      map: textures[5],\n      color: diceColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\n// 주사위 색상 가져오기\n_s2(PhysicalDice, \"G4XcLYN56BqV1jBrIDaWg8b5feg=\", false, function () {\n  return [useBox, useLoader, useFrame];\n});\n_c2 = PhysicalDice;\nconst getDiceColor = type => {\n  if (type === 'RED') return 0xff0000;\n  if (type === 'YELLOW') return 0xffff00;\n  if (type === 'GREEN') return 0x00ff00;\n  return 0xffffff;\n};\n\n// 주사위 타입에 따른 텍스처 가져오기\nconst getTexturesForType = type => {\n  if (type === 'RED') {\n    return [redBrain, redShotgun, redFootsteps, redBrain, redShotgun, redFootsteps];\n  } else if (type === 'YELLOW') {\n    return [yellowBrain, yellowShotgun, yellowFootsteps, yellowBrain, yellowShotgun, yellowFootsteps];\n  } else if (type === 'GREEN') {\n    return [greenBrain, greenShotgun, greenFootsteps, greenBrain, greenShotgun, greenFootsteps];\n  }\n  return [];\n};\n\n// 결과에 맞게 주사위 회전 조정\nconst adjustDiceRotation = (result, api) => {\n  let targetRotation = [0, 0, 0];\n\n  // 결과에 따라 주사위 회전 설정\n  if (result === 'BRAIN') {\n    targetRotation = [0, 0, 0]; // 뇌가 위로 오도록\n  } else if (result === 'SHOTGUN') {\n    targetRotation = [0, Math.PI / 2, 0]; // 총이 위로 오도록\n  } else if (result === 'FOOTSTEPS') {\n    targetRotation = [Math.PI / 2, 0, 0]; // 발자국이 위로 오도록\n  }\n\n  // 주사위 회전 설정\n  api.rotation.set(...targetRotation);\n  api.velocity.set(0, 0, 0);\n  api.angularVelocity.set(0, 0, 0);\n};\n\n// 주사위 컨테이너 컴포넌트\nconst DiceContainer = ({\n  type,\n  result,\n  isRolling\n}) => {\n  _s3();\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const handleAnimationComplete = () => {\n    setAnimationComplete(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `dice-result-container ${isRolling && !animationComplete ? 'rolling-container' : 'animation-ended'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `dice-3d-container ${type.toLowerCase()}-dice-container`,\n      children: /*#__PURE__*/_jsxDEV(Canvas, {\n        shadows: true,\n        camera: {\n          position: [0, 2, 5],\n          fov: 50\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n          intensity: 0.5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n          position: [10, 10, 10],\n          intensity: 0.8,\n          castShadow: true,\n          \"shadow-mapSize-width\": 1024,\n          \"shadow-mapSize-height\": 1024\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n          fallback: null,\n          children: /*#__PURE__*/_jsxDEV(Physics, {\n            gravity: [0, -9.8, 0],\n            defaultContactMaterial: {\n              restitution: 0.3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Floor, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(PhysicalDice, {\n              type: type,\n              result: result,\n              isRolling: isRolling,\n              onAnimationComplete: handleAnimationComplete\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `dice-result-label ${getResultClass(result)} ${animationComplete ? 'show-result' : ''}`,\n      children: [result === 'BRAIN' && '뇌', result === 'SHOTGUN' && '총', result === 'FOOTSTEPS' && '발자국']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n\n// 결과 타입에 따른 클래스 이름 가져오기\n_s3(DiceContainer, \"Vm61eBUTB3kLEMMMnioQCEBlDHU=\");\n_c3 = DiceContainer;\nconst getResultClass = result => {\n  if (result === 'BRAIN') return 'result-brain';\n  if (result === 'SHOTGUN') return 'result-shotgun';\n  if (result === 'FOOTSTEPS') return 'result-footsteps';\n  return '';\n};\n\n// 기존 Dice 컴포넌트를 DiceContainer로 대체\nconst Dice = ({\n  type,\n  result,\n  isRolling\n}) => {\n  return /*#__PURE__*/_jsxDEV(DiceContainer, {\n    type: type,\n    result: result,\n    isRolling: isRolling\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 10\n  }, this);\n};\n_c4 = Dice;\nfunction ZombieDice({\n  players,\n  currentTurn,\n  onTurnEnd,\n  isMyTurn\n}) {\n  _s4();\n  const [dicePool, setDicePool] = useState([]);\n  const [selectedDice, setSelectedDice] = useState([]);\n  const [rolledResults, setRolledResults] = useState([]);\n  const [currentBrains, setCurrentBrains] = useState(0);\n  const [currentShotguns, setCurrentShotguns] = useState(0);\n  const [isRolling, setIsRolling] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const diceContainerRef = useRef(null);\n\n  // 주사위 선택 요청\n  const handleSelectDice = () => {\n    console.log('주사위 선택 요청');\n    if (window.socket) {\n      const roomId = window.location.pathname.split('/')[2];\n      window.socket.emit('gameAction', {\n        action: 'rollDice',\n        selectDice: true,\n        roomId\n      });\n    } else {\n      console.error('소켓 연결이 없습니다!');\n    }\n  };\n\n  // 주사위 굴리기 요청\n  const handleRoll = () => {\n    console.log('주사위 굴리기 요청');\n\n    // 선택된 주사위가 없으면 먼저 선택\n    if (!selectedDice || selectedDice.length === 0) {\n      console.log('선택된 주사위 없음, 주사위 선택 요청');\n      handleSelectDice();\n      return;\n    }\n    console.log('선택된 주사위로 굴리기 요청:', selectedDice);\n\n    // 주사위 굴리기 요청\n    if (window.socket) {\n      const roomId = window.location.pathname.split('/')[2];\n      window.socket.emit('gameAction', {\n        action: 'rollDice',\n        roomId\n      });\n      setIsRolling(true);\n    } else {\n      console.error('소켓 연결이 없습니다!');\n    }\n  };\n\n  // 턴 종료 요청\n  const handleStop = () => {\n    // 샷건이 3개 이상이면 점수 0으로 처리\n    const finalScore = currentShotguns >= 3 ? 0 : currentBrains;\n    if (window.socket) {\n      const roomId = window.location.pathname.split('/')[2];\n      window.socket.emit('endTurn', {\n        roomId,\n        score: finalScore\n      });\n    } else {\n      console.error('소켓 연결이 없습니다!');\n    }\n\n    // 로컬 콜백 호출\n    onTurnEnd(finalScore);\n  };\n\n  // 계속하기 요청\n  const handleContinue = () => {\n    // 도망간 주사위 찾기\n    const footstepsDice = rolledResults.filter(result => result.result === 'FOOTSTEPS').map(result => result.type);\n    if (window.socket) {\n      const roomId = window.location.pathname.split('/')[2];\n      window.socket.emit('continueTurn', {\n        roomId,\n        footstepsDice\n      });\n\n      // 이전 결과에서 도망이 아닌 주사위만 유지\n      const nonFootstepsResults = rolledResults.filter(result => result.result !== 'FOOTSTEPS');\n      setRolledResults(nonFootstepsResults);\n    } else {\n      console.error('소켓 연결이 없습니다!');\n    }\n  };\n\n  // 소켓 이벤트 리스너\n  useEffect(() => {\n    if (window.socket) {\n      console.log('소켓 이벤트 리스너 등록');\n\n      // 게임 시작 이벤트\n      const handleGameStarted = data => {\n        console.log('게임 시작:', data);\n\n        // 서버에서 받은 게임 상태로 초기화\n        if (data.gameState) {\n          console.log('게임 상태 초기화:', data.gameState);\n\n          // 주사위 풀 초기화\n          if (data.gameState.dicePool && data.gameState.dicePool.length > 0) {\n            setDicePool(data.gameState.dicePool);\n          } else {\n            console.warn('주사위 풀이 없거나 비어있습니다. 초기화합니다.');\n            // 주사위 풀 초기화\n            const initialDicePool = [...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')];\n\n            // 서버에 주사위 풀 초기화 알림\n            const roomId = window.location.pathname.split('/')[2];\n            window.socket.emit('updateDicePool', {\n              roomId,\n              dicePool: initialDicePool\n            });\n            setDicePool(initialDicePool);\n          }\n          setCurrentBrains(0);\n          setCurrentShotguns(0);\n          setRolledResults([]);\n          setSelectedDice([]);\n          setWinner(null);\n        } else {\n          // 게임 상태가 없는 경우 기본값으로 초기화\n          console.warn('게임 상태가 없습니다. 기본값으로 초기화합니다.');\n          const initialDicePool = [...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')];\n\n          // 서버에 주사위 풀 초기화 알림\n          const roomId = window.location.pathname.split('/')[2];\n          window.socket.emit('updateDicePool', {\n            roomId,\n            dicePool: initialDicePool\n          });\n          setDicePool(initialDicePool);\n          setCurrentBrains(0);\n          setCurrentShotguns(0);\n          setRolledResults([]);\n          setSelectedDice([]);\n          setWinner(null);\n        }\n      };\n\n      // 주사위 선택 이벤트\n      const handleDiceSelected = data => {\n        console.log('주사위 선택됨:', data);\n        setSelectedDice(data.selectedDice || []);\n        setDicePool(data.dicePool || []);\n\n        // 주사위가 선택되면 자동으로 굴리기 요청\n        if (data.selectedDice && data.selectedDice.length > 0 && isMyTurn) {\n          console.log('주사위 선택 후 자동으로 굴리기 요청');\n\n          // 약간의 딜레이 후 굴리기 요청 (UI 업데이트를 위해)\n          setTimeout(() => {\n            const roomId = window.location.pathname.split('/')[2];\n            window.socket.emit('gameAction', {\n              action: 'rollDice',\n              roomId\n            });\n            setIsRolling(true);\n          }, 100);\n        }\n      };\n\n      // 주사위 굴리기 결과 이벤트\n      const handleGameAction = data => {\n        console.log('게임 액션 결과:', data);\n        if (data.action === 'rollDice' && data.results) {\n          // 주사위 굴리기 결과 처리\n          setRolledResults(data.results);\n\n          // 애니메이션 시작\n          setIsRolling(true);\n\n          // 애니메이션 종료 후 상태 업데이트\n          setTimeout(() => {\n            setIsRolling(false);\n\n            // 주사위 풀 업데이트\n            if (data.dicePool) {\n              setDicePool(data.dicePool);\n            }\n\n            // 뇌와 샷건 개수 업데이트\n            if (data.brains !== undefined && data.shotguns !== undefined) {\n              setCurrentBrains(data.brains);\n              setCurrentShotguns(data.shotguns);\n            }\n\n            // 승자 확인\n            if (data.winner) {\n              setWinner(data.winner);\n            }\n          }, 2500); // 애니메이션 시간보다 약간 더 길게 설정\n        }\n      };\n\n      // 턴 상태 업데이트 이벤트\n      const handleTurnStatusUpdated = data => {\n        console.log('턴 상태 업데이트:', data);\n\n        // 내 턴이 아닐 때만 상태 업데이트\n        if (!isMyTurn) {\n          setCurrentBrains(data.currentBrains);\n          setCurrentShotguns(data.currentShotguns);\n        }\n\n        // 주사위 풀 업데이트\n        setDicePool(data.dicePool || []);\n      };\n\n      // 게임 상태 업데이트 이벤트\n      const handleGameStateUpdated = gameState => {\n        console.log('게임 상태 업데이트:', gameState);\n\n        // 현재 턴이 변경되었는지 확인\n        const isMyTurnChanged = gameState.currentTurn !== currentTurn;\n        if (isMyTurnChanged) {\n          console.log('턴 변경 감지, 주사위 풀 초기화');\n\n          // 주사위 풀 초기화 - 서버에서 받은 값 사용 또는 기본값으로 초기화\n          const initialDicePool = gameState.dicePool || [...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')];\n\n          // 서버에 주사위 풀 초기화 알림\n          const roomId = window.location.pathname.split('/')[2];\n          window.socket.emit('updateDicePool', {\n            roomId,\n            dicePool: initialDicePool\n          });\n          setDicePool(initialDicePool);\n          setCurrentBrains(0);\n          setCurrentShotguns(0);\n          setRolledResults([]);\n          setSelectedDice([]);\n        } else {\n          // 주사위 풀 업데이트 - 서버 상태로 동기화\n          if (gameState.dicePool) {\n            console.log('주사위 풀 업데이트:', gameState.dicePool);\n            setDicePool(gameState.dicePool);\n          }\n        }\n\n        // 현재 턴 업데이트\n        if (gameState.currentTurn !== undefined) {\n          // 턴이 변경되었으면 상태 초기화\n          setCurrentBrains(gameState.currentBrains || 0);\n          setCurrentShotguns(gameState.currentShotguns || 0);\n        }\n      };\n\n      // 게임 종료 이벤트\n      const handleGameEnded = data => {\n        console.log('게임 종료:', data);\n        setWinner(data.winner);\n      };\n\n      // 게임 에러 이벤트\n      const handleGameError = data => {\n        console.error('게임 에러:', data.message);\n\n        // 에러 처리\n        alert(`게임 에러: ${data.message}`);\n      };\n\n      // 이벤트 리스너 등록\n      window.socket.on('gameStarted', handleGameStarted);\n      window.socket.on('diceSelected', handleDiceSelected);\n      window.socket.on('gameAction', handleGameAction);\n      window.socket.on('turnStatusUpdated', handleTurnStatusUpdated);\n      window.socket.on('gameStateUpdated', handleGameStateUpdated);\n      window.socket.on('gameEnded', handleGameEnded);\n      window.socket.on('gameError', handleGameError);\n\n      // 클린업\n      return () => {\n        console.log('소켓 이벤트 리스너 제거');\n        window.socket.off('gameStarted', handleGameStarted);\n        window.socket.off('diceSelected', handleDiceSelected);\n        window.socket.off('gameAction', handleGameAction);\n        window.socket.off('turnStatusUpdated', handleTurnStatusUpdated);\n        window.socket.off('gameStateUpdated', handleGameStateUpdated);\n        window.socket.off('gameEnded', handleGameEnded);\n        window.socket.off('gameError', handleGameError);\n      };\n    }\n  }, [currentBrains, currentShotguns, isMyTurn, onTurnEnd]);\n\n  // 주사위 풀 상태 표시 컴포넌트\n  const DicePoolStatus = ({\n    dicePool\n  }) => {\n    // 주사위 풀이 없으면 초기화\n    const pool = Array.isArray(dicePool) ? dicePool : [];\n\n    // 주사위 색상별 개수 계산\n    const redCount = pool.filter(dice => dice === 'RED').length;\n    const yellowCount = pool.filter(dice => dice === 'YELLOW').length;\n    const greenCount = pool.filter(dice => dice === 'GREEN').length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-pool-status mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"\\uB0A8\\uC740 \\uC8FC\\uC0AC\\uC704:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-pool-counts\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-count red\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dice-color-indicator red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 13\n          }, this), \"\\uBE68\\uAC04\\uC0C9: \", redCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-count yellow\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dice-color-indicator yellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 13\n          }, this), \"\\uB178\\uB780\\uC0C9: \", yellowCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-count green\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dice-color-indicator green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 13\n          }, this), \"\\uCD08\\uB85D\\uC0C9: \", greenCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 점수판 렌더링\n  const renderScoreBoard = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-board mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-center mb-3\",\n        children: \"\\uC810\\uC218\\uD310\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `col-md-${12 / players.length} mb-2`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card ${index === currentTurn ? 'bg-light' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-title\",\n                children: player.nickname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"\\uC810\\uC218: \", player.score || 0]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 다른 플레이어의 턴일 때 화면\n  if (!isMyTurn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"zombie-dice\",\n      children: [renderScoreBoard(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [players[currentTurn].nickname, \"\\uB2D8\\uC758 \\uCC28\\uB840\\uC785\\uB2C8\\uB2E4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-status mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-around\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uD68D\\uB4DD\\uD55C \\uB1CC: \", currentBrains]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uC0F7\\uAC74 \\uD69F\\uC218: \", currentShotguns, \"/3\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-area mb-3\",\n        children: isRolling ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uC8FC\\uC0AC\\uC704 \\uAD74\\uB9AC\\uB294 \\uC911...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 13\n        }, this) : rolledResults.length > 0 && rolledResults.map((result, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          type: result.type,\n          result: result.result,\n          isRolling: isRolling\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DicePoolStatus, {\n        dicePool: dicePool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 내 턴일 때 화면\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"zombie-dice\",\n    children: [renderScoreBoard(), winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uD83C\\uDFC6 \", winner.nickname, \"\\uB2D8\\uC774 \\uC2B9\\uB9AC\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4! \\uD83C\\uDFC6\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"my-turn-indicator\",\n          children: \"\\uB2F9\\uC2E0\\uC758 \\uCC28\\uB840\\uC785\\uB2C8\\uB2E4!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-status mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-around\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uD68D\\uB4DD\\uD55C \\uB1CC: \", currentBrains]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uC0F7\\uAC74 \\uD69F\\uC218: \", currentShotguns, \"/3\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-area mb-3\",\n        children: isRolling ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uC8FC\\uC0AC\\uC704 \\uAD74\\uB9AC\\uB294 \\uC911...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 15\n        }, this) : rolledResults.length > 0 ? rolledResults.map((result, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          type: result.type,\n          result: result.result,\n          isRolling: isRolling\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 19\n        }, this)) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleRoll,\n          disabled: isRolling,\n          children: selectedDice.length === 0 ? \"주사위 선택\" : \"주사위 굴리기\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 11\n      }, this), rolledResults.length > 0 && !winner && !isRolling && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success me-2\",\n          onClick: handleContinue,\n          disabled: currentShotguns >= 3,\n          children: \"\\uACC4\\uC18D\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-warning\",\n          onClick: handleStop,\n          children: currentShotguns >= 3 ? \"턴 종료 (0점)\" : \"멈추기\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 13\n      }, this), currentShotguns >= 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uCD1D\\uC774 3\\uAC1C \\uC774\\uC0C1!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 15\n        }, this), \" \\uC774\\uBC88 \\uD134\\uC5D0 \\uD68D\\uB4DD\\uD55C \\uB1CC\\uB97C \\uBAA8\\uB450 \\uC783\\uC5C8\\uC2B5\\uB2C8\\uB2E4. \\uD134\\uC744 \\uC885\\uB8CC\\uD574\\uC8FC\\uC138\\uC694.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DicePoolStatus, {\n        dicePool: dicePool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 694,\n    columnNumber: 5\n  }, this);\n}\n_s4(ZombieDice, \"jXHRXhASj26bUfojBERxCWlONeA=\");\n_c5 = ZombieDice;\nexport default ZombieDice;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Floor\");\n$RefreshReg$(_c2, \"PhysicalDice\");\n$RefreshReg$(_c3, \"DiceContainer\");\n$RefreshReg$(_c4, \"Dice\");\n$RefreshReg$(_c5, \"ZombieDice\");","map":{"version":3,"names":["useState","useEffect","useRef","Suspense","Canvas","useFrame","useLoader","Physics","useBox","usePlane","THREE","TextureLoader","redBrain","redFootsteps","redShotgun","yellowBrain","yellowFootsteps","yellowShotgun","greenBrain","greenFootsteps","greenShotgun","jsxDEV","_jsxDEV","Fragment","_Fragment","WINNING_SCORE","DICE_FACES","RED","faces","image","type","YELLOW","GREEN","Floor","_s","ref","rotation","Math","PI","position","receiveShadow","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","transparent","opacity","_c","PhysicalDice","result","isRolling","onAnimationComplete","_s2","api","mass","random","allowSleep","sleepSpeedLimit","sleepTimeLimit","textures","getTexturesForType","diceColor","getDiceColor","set","velocity","angularVelocity","timer","setTimeout","clearTimeout","setRotation","sleeping","setSleeping","get","vel","speed","sqrt","adjustDiceRotation","castShadow","attachArray","map","_c2","targetRotation","DiceContainer","_s3","animationComplete","setAnimationComplete","handleAnimationComplete","className","toLowerCase","shadows","camera","fov","intensity","fallback","gravity","defaultContactMaterial","restitution","getResultClass","_c3","Dice","_c4","ZombieDice","players","currentTurn","onTurnEnd","isMyTurn","_s4","dicePool","setDicePool","selectedDice","setSelectedDice","rolledResults","setRolledResults","currentBrains","setCurrentBrains","currentShotguns","setCurrentShotguns","setIsRolling","winner","setWinner","diceContainerRef","handleSelectDice","console","log","window","socket","roomId","location","pathname","split","emit","action","selectDice","error","handleRoll","length","handleStop","finalScore","score","handleContinue","footstepsDice","filter","nonFootstepsResults","handleGameStarted","data","gameState","warn","initialDicePool","Array","fill","handleDiceSelected","handleGameAction","results","brains","undefined","shotguns","handleTurnStatusUpdated","handleGameStateUpdated","isMyTurnChanged","handleGameEnded","handleGameError","message","alert","on","off","DicePoolStatus","pool","isArray","redCount","dice","yellowCount","greenCount","renderScoreBoard","player","index","nickname","onClick","disabled","_c5","$RefreshReg$"],"sources":["F:/Workspace/Cursor/game/frontend/src/components/games/ZombieDice.js"],"sourcesContent":["import { useState, useEffect, useRef, Suspense } from 'react';\r\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\r\nimport { Physics, useBox, usePlane } from '@react-three/cannon';\r\nimport * as THREE from 'three';\r\nimport { TextureLoader } from 'three';\r\nimport redBrain from '../../assets/zombie-dice/faces/red-brain.png';\r\nimport redFootsteps from '../../assets/zombie-dice/faces/red-footsteps.png';\r\nimport redShotgun from '../../assets/zombie-dice/faces/red-shotgun.png';\r\nimport yellowBrain from '../../assets/zombie-dice/faces/yellow-brain.png';\r\nimport yellowFootsteps from '../../assets/zombie-dice/faces/yellow-footsteps.png';\r\nimport yellowShotgun from '../../assets/zombie-dice/faces/yellow-shotgun.png';\r\nimport greenBrain from '../../assets/zombie-dice/faces/green-brain.png';\r\nimport greenFootsteps from '../../assets/zombie-dice/faces/green-footsteps.png';\r\nimport greenShotgun from '../../assets/zombie-dice/faces/green-shotgun.png';\r\nimport '../styles/ZombieDice.css';\r\n\r\n// 승리 점수\r\nconst WINNING_SCORE = 13;\r\n\r\n// 주사위 면 정의\r\nconst DICE_FACES = {\r\n  RED: {\r\n    faces: [\r\n      { image: redBrain, type: 'BRAIN' },      // 1면\r\n      { image: redFootsteps, type: 'FOOTSTEPS' }, // 2면\r\n      { image: redFootsteps, type: 'FOOTSTEPS' }, // 3면\r\n      { image: redShotgun, type: 'SHOTGUN' },   // 4면\r\n      { image: redShotgun, type: 'SHOTGUN' },   // 5면\r\n      { image: redShotgun, type: 'SHOTGUN' }    // 6면\r\n    ]\r\n  },\r\n  YELLOW: {\r\n    faces: [\r\n      { image: yellowBrain, type: 'BRAIN' },     // 1면\r\n      { image: yellowBrain, type: 'BRAIN' },     // 2면\r\n      { image: yellowFootsteps, type: 'FOOTSTEPS' }, // 3면\r\n      { image: yellowFootsteps, type: 'FOOTSTEPS' }, // 4면\r\n      { image: yellowShotgun, type: 'SHOTGUN' },  // 5면\r\n      { image: yellowShotgun, type: 'SHOTGUN' }   // 6면\r\n    ]\r\n  },\r\n  GREEN: {\r\n    faces: [\r\n      { image: greenBrain, type: 'BRAIN' },     // 1면\r\n      { image: greenBrain, type: 'BRAIN' },     // 2면\r\n      { image: greenBrain, type: 'BRAIN' },     // 3면\r\n      { image: greenFootsteps, type: 'FOOTSTEPS' }, // 4면\r\n      { image: greenFootsteps, type: 'FOOTSTEPS' }, // 5면\r\n      { image: greenShotgun, type: 'SHOTGUN' }   // 6면\r\n    ]\r\n  }\r\n};\r\n\r\n// 바닥 컴포넌트\r\nconst Floor = () => {\r\n  const [ref] = usePlane(() => ({ \r\n    rotation: [-Math.PI / 2, 0, 0],\r\n    position: [0, -2, 0],\r\n    type: 'Static'\r\n  }));\r\n  \r\n  return (\r\n    <mesh ref={ref} receiveShadow>\r\n      <planeGeometry args={[20, 20]} />\r\n      <shadowMaterial color=\"#171717\" transparent opacity={0.2} />\r\n    </mesh>\r\n  );\r\n};\r\n\r\n// 물리 기반 주사위 컴포넌트\r\nconst PhysicalDice = ({ type, result, isRolling, onAnimationComplete }) => {\r\n  const [ref, api] = useBox(() => ({ \r\n    mass: 1,\r\n    position: [0, 5, 0],\r\n    rotation: [\r\n      Math.random() * Math.PI,\r\n      Math.random() * Math.PI,\r\n      Math.random() * Math.PI\r\n    ],\r\n    args: [1, 1, 1],\r\n    allowSleep: true,\r\n    sleepSpeedLimit: 0.1,\r\n    sleepTimeLimit: 1\r\n  }));\r\n  \r\n  // 텍스처 로드\r\n  const textures = useLoader(TextureLoader, getTexturesForType(type));\r\n  \r\n  // 주사위 색상 설정\r\n  const diceColor = getDiceColor(type);\r\n  \r\n  // 주사위 굴리기 효과\r\n  useEffect(() => {\r\n    if (isRolling) {\r\n      // 주사위 위치 초기화\r\n      api.position.set(0, 5, 0);\r\n      \r\n      // 랜덤한 힘과 회전으로 주사위 던지기\r\n      api.velocity.set(\r\n        (Math.random() - 0.5) * 5,\r\n        3 + Math.random() * 2,\r\n        (Math.random() - 0.5) * 5\r\n      );\r\n      \r\n      api.angularVelocity.set(\r\n        Math.random() * 10 - 5,\r\n        Math.random() * 10 - 5,\r\n        Math.random() * 10 - 5\r\n      );\r\n      \r\n      // 애니메이션 완료 타이머 설정\r\n      const timer = setTimeout(() => {\r\n        if (onAnimationComplete) {\r\n          onAnimationComplete();\r\n        }\r\n      }, 2000); // 2초 후 애니메이션 완료\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [isRolling, api, onAnimationComplete]);\r\n  \r\n  // 주사위 회전 상태 모니터링\r\n  const [rotation, setRotation] = useState([0, 0, 0]);\r\n  const [sleeping, setSleeping] = useState(false);\r\n  \r\n  useFrame(() => {\r\n    // 주사위 회전 상태 업데이트\r\n    api.rotation.get(setRotation);\r\n    \r\n    // 주사위가 멈췄는지 확인\r\n    if (!sleeping) {\r\n      api.velocity.get(vel => {\r\n        const speed = Math.sqrt(vel[0]**2 + vel[1]**2 + vel[2]**2);\r\n        if (speed < 0.1) {\r\n          setSleeping(true);\r\n          \r\n          // 결과에 맞게 주사위 회전 조정\r\n          adjustDiceRotation(result, api);\r\n        }\r\n      });\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <mesh \r\n      ref={ref}\r\n      castShadow\r\n      receiveShadow\r\n    >\r\n      <boxGeometry args={[1, 1, 1]} />\r\n      <meshStandardMaterial \r\n        attachArray=\"material\" \r\n        map={textures[0]} \r\n        color={diceColor}\r\n      />\r\n      <meshStandardMaterial \r\n        attachArray=\"material\" \r\n        map={textures[1]} \r\n        color={diceColor}\r\n      />\r\n      <meshStandardMaterial \r\n        attachArray=\"material\" \r\n        map={textures[2]} \r\n        color={diceColor}\r\n      />\r\n      <meshStandardMaterial \r\n        attachArray=\"material\" \r\n        map={textures[3]} \r\n        color={diceColor}\r\n      />\r\n      <meshStandardMaterial \r\n        attachArray=\"material\" \r\n        map={textures[4]} \r\n        color={diceColor}\r\n      />\r\n      <meshStandardMaterial \r\n        attachArray=\"material\" \r\n        map={textures[5]} \r\n        color={diceColor}\r\n      />\r\n    </mesh>\r\n  );\r\n};\r\n\r\n// 주사위 색상 가져오기\r\nconst getDiceColor = (type) => {\r\n  if (type === 'RED') return 0xff0000;\r\n  if (type === 'YELLOW') return 0xffff00;\r\n  if (type === 'GREEN') return 0x00ff00;\r\n  return 0xffffff;\r\n};\r\n\r\n// 주사위 타입에 따른 텍스처 가져오기\r\nconst getTexturesForType = (type) => {\r\n  if (type === 'RED') {\r\n    return [redBrain, redShotgun, redFootsteps, redBrain, redShotgun, redFootsteps];\r\n  } else if (type === 'YELLOW') {\r\n    return [yellowBrain, yellowShotgun, yellowFootsteps, yellowBrain, yellowShotgun, yellowFootsteps];\r\n  } else if (type === 'GREEN') {\r\n    return [greenBrain, greenShotgun, greenFootsteps, greenBrain, greenShotgun, greenFootsteps];\r\n  }\r\n  return [];\r\n};\r\n\r\n// 결과에 맞게 주사위 회전 조정\r\nconst adjustDiceRotation = (result, api) => {\r\n  let targetRotation = [0, 0, 0];\r\n  \r\n  // 결과에 따라 주사위 회전 설정\r\n  if (result === 'BRAIN') {\r\n    targetRotation = [0, 0, 0]; // 뇌가 위로 오도록\r\n  } else if (result === 'SHOTGUN') {\r\n    targetRotation = [0, Math.PI / 2, 0]; // 총이 위로 오도록\r\n  } else if (result === 'FOOTSTEPS') {\r\n    targetRotation = [Math.PI / 2, 0, 0]; // 발자국이 위로 오도록\r\n  }\r\n  \r\n  // 주사위 회전 설정\r\n  api.rotation.set(...targetRotation);\r\n  api.velocity.set(0, 0, 0);\r\n  api.angularVelocity.set(0, 0, 0);\r\n};\r\n\r\n// 주사위 컨테이너 컴포넌트\r\nconst DiceContainer = ({ type, result, isRolling }) => {\r\n  const [animationComplete, setAnimationComplete] = useState(false);\r\n  \r\n  const handleAnimationComplete = () => {\r\n    setAnimationComplete(true);\r\n  };\r\n  \r\n  return (\r\n    <div className={`dice-result-container ${isRolling && !animationComplete ? 'rolling-container' : 'animation-ended'}`}>\r\n      <div className={`dice-3d-container ${type.toLowerCase()}-dice-container`}>\r\n        <Canvas shadows camera={{ position: [0, 2, 5], fov: 50 }}>\r\n          <ambientLight intensity={0.5} />\r\n          <directionalLight\r\n            position={[10, 10, 10]}\r\n            intensity={0.8}\r\n            castShadow\r\n            shadow-mapSize-width={1024}\r\n            shadow-mapSize-height={1024}\r\n          />\r\n          <Suspense fallback={null}>\r\n            <Physics \r\n              gravity={[0, -9.8, 0]} \r\n              defaultContactMaterial={{ restitution: 0.3 }}\r\n            >\r\n              <Floor />\r\n              <PhysicalDice \r\n                type={type} \r\n                result={result} \r\n                isRolling={isRolling} \r\n                onAnimationComplete={handleAnimationComplete}\r\n              />\r\n            </Physics>\r\n          </Suspense>\r\n        </Canvas>\r\n      </div>\r\n      <div className={`dice-result-label ${getResultClass(result)} ${animationComplete ? 'show-result' : ''}`}>\r\n        {result === 'BRAIN' && '뇌'}\r\n        {result === 'SHOTGUN' && '총'}\r\n        {result === 'FOOTSTEPS' && '발자국'}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 결과 타입에 따른 클래스 이름 가져오기\r\nconst getResultClass = (result) => {\r\n  if (result === 'BRAIN') return 'result-brain';\r\n  if (result === 'SHOTGUN') return 'result-shotgun';\r\n  if (result === 'FOOTSTEPS') return 'result-footsteps';\r\n  return '';\r\n};\r\n\r\n// 기존 Dice 컴포넌트를 DiceContainer로 대체\r\nconst Dice = ({ type, result, isRolling }) => {\r\n  return <DiceContainer type={type} result={result} isRolling={isRolling} />;\r\n};\r\n\r\nfunction ZombieDice({ players, currentTurn, onTurnEnd, isMyTurn }) {\r\n  const [dicePool, setDicePool] = useState([]);\r\n  const [selectedDice, setSelectedDice] = useState([]);\r\n  const [rolledResults, setRolledResults] = useState([]);\r\n  const [currentBrains, setCurrentBrains] = useState(0);\r\n  const [currentShotguns, setCurrentShotguns] = useState(0);\r\n  const [isRolling, setIsRolling] = useState(false);\r\n  const [winner, setWinner] = useState(null);\r\n  const diceContainerRef = useRef(null);\r\n\r\n  // 주사위 선택 요청\r\n  const handleSelectDice = () => {\r\n    console.log('주사위 선택 요청');\r\n    \r\n    if (window.socket) {\r\n      const roomId = window.location.pathname.split('/')[2];\r\n      \r\n      window.socket.emit('gameAction', {\r\n        action: 'rollDice',\r\n        selectDice: true,\r\n        roomId\r\n      });\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n    }\r\n  };\r\n\r\n  // 주사위 굴리기 요청\r\n  const handleRoll = () => {\r\n    console.log('주사위 굴리기 요청');\r\n    \r\n    // 선택된 주사위가 없으면 먼저 선택\r\n    if (!selectedDice || selectedDice.length === 0) {\r\n      console.log('선택된 주사위 없음, 주사위 선택 요청');\r\n      handleSelectDice();\r\n      return;\r\n    }\r\n    \r\n    console.log('선택된 주사위로 굴리기 요청:', selectedDice);\r\n    \r\n    // 주사위 굴리기 요청\r\n    if (window.socket) {\r\n      const roomId = window.location.pathname.split('/')[2];\r\n      \r\n      window.socket.emit('gameAction', {\r\n        action: 'rollDice',\r\n        roomId\r\n      });\r\n      \r\n      setIsRolling(true);\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n    }\r\n  };\r\n\r\n  // 턴 종료 요청\r\n  const handleStop = () => {\r\n    // 샷건이 3개 이상이면 점수 0으로 처리\r\n    const finalScore = currentShotguns >= 3 ? 0 : currentBrains;\r\n    \r\n    if (window.socket) {\r\n      const roomId = window.location.pathname.split('/')[2];\r\n      \r\n      window.socket.emit('endTurn', {\r\n        roomId,\r\n        score: finalScore\r\n      });\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n    }\r\n    \r\n    // 로컬 콜백 호출\r\n    onTurnEnd(finalScore);\r\n  };\r\n\r\n  // 계속하기 요청\r\n  const handleContinue = () => {\r\n    // 도망간 주사위 찾기\r\n    const footstepsDice = rolledResults\r\n      .filter(result => result.result === 'FOOTSTEPS')\r\n      .map(result => result.type);\r\n    \r\n    if (window.socket) {\r\n      const roomId = window.location.pathname.split('/')[2];\r\n      \r\n      window.socket.emit('continueTurn', {\r\n        roomId,\r\n        footstepsDice\r\n      });\r\n      \r\n      // 이전 결과에서 도망이 아닌 주사위만 유지\r\n      const nonFootstepsResults = rolledResults.filter(result => result.result !== 'FOOTSTEPS');\r\n      setRolledResults(nonFootstepsResults);\r\n    } else {\r\n      console.error('소켓 연결이 없습니다!');\r\n    }\r\n  };\r\n\r\n  // 소켓 이벤트 리스너\r\n  useEffect(() => {\r\n    if (window.socket) {\r\n      console.log('소켓 이벤트 리스너 등록');\r\n      \r\n      // 게임 시작 이벤트\r\n      const handleGameStarted = (data) => {\r\n        console.log('게임 시작:', data);\r\n        \r\n        // 서버에서 받은 게임 상태로 초기화\r\n        if (data.gameState) {\r\n          console.log('게임 상태 초기화:', data.gameState);\r\n          \r\n          // 주사위 풀 초기화\r\n          if (data.gameState.dicePool && data.gameState.dicePool.length > 0) {\r\n            setDicePool(data.gameState.dicePool);\r\n          } else {\r\n            console.warn('주사위 풀이 없거나 비어있습니다. 초기화합니다.');\r\n            // 주사위 풀 초기화\r\n            const initialDicePool = [\r\n              ...Array(3).fill('RED'),\r\n              ...Array(4).fill('YELLOW'),\r\n              ...Array(6).fill('GREEN')\r\n            ];\r\n            \r\n            // 서버에 주사위 풀 초기화 알림\r\n            const roomId = window.location.pathname.split('/')[2];\r\n            window.socket.emit('updateDicePool', {\r\n              roomId,\r\n              dicePool: initialDicePool\r\n            });\r\n            \r\n            setDicePool(initialDicePool);\r\n          }\r\n          \r\n          setCurrentBrains(0);\r\n          setCurrentShotguns(0);\r\n          setRolledResults([]);\r\n          setSelectedDice([]);\r\n          setWinner(null);\r\n        } else {\r\n          // 게임 상태가 없는 경우 기본값으로 초기화\r\n          console.warn('게임 상태가 없습니다. 기본값으로 초기화합니다.');\r\n          const initialDicePool = [\r\n            ...Array(3).fill('RED'),\r\n            ...Array(4).fill('YELLOW'),\r\n            ...Array(6).fill('GREEN')\r\n          ];\r\n          \r\n          // 서버에 주사위 풀 초기화 알림\r\n          const roomId = window.location.pathname.split('/')[2];\r\n          window.socket.emit('updateDicePool', {\r\n            roomId,\r\n            dicePool: initialDicePool\r\n          });\r\n          \r\n          setDicePool(initialDicePool);\r\n          setCurrentBrains(0);\r\n          setCurrentShotguns(0);\r\n          setRolledResults([]);\r\n          setSelectedDice([]);\r\n          setWinner(null);\r\n        }\r\n      };\r\n      \r\n      // 주사위 선택 이벤트\r\n      const handleDiceSelected = (data) => {\r\n        console.log('주사위 선택됨:', data);\r\n        \r\n        setSelectedDice(data.selectedDice || []);\r\n        setDicePool(data.dicePool || []);\r\n        \r\n        // 주사위가 선택되면 자동으로 굴리기 요청\r\n        if (data.selectedDice && data.selectedDice.length > 0 && isMyTurn) {\r\n          console.log('주사위 선택 후 자동으로 굴리기 요청');\r\n          \r\n          // 약간의 딜레이 후 굴리기 요청 (UI 업데이트를 위해)\r\n          setTimeout(() => {\r\n            const roomId = window.location.pathname.split('/')[2];\r\n            window.socket.emit('gameAction', {\r\n              action: 'rollDice',\r\n              roomId\r\n            });\r\n            \r\n            setIsRolling(true);\r\n          }, 100);\r\n        }\r\n      };\r\n      \r\n      // 주사위 굴리기 결과 이벤트\r\n      const handleGameAction = (data) => {\r\n        console.log('게임 액션 결과:', data);\r\n        \r\n        if (data.action === 'rollDice' && data.results) {\r\n          // 주사위 굴리기 결과 처리\r\n          setRolledResults(data.results);\r\n          \r\n          // 애니메이션 시작\r\n          setIsRolling(true);\r\n          \r\n          // 애니메이션 종료 후 상태 업데이트\r\n          setTimeout(() => {\r\n            setIsRolling(false);\r\n            \r\n            // 주사위 풀 업데이트\r\n            if (data.dicePool) {\r\n              setDicePool(data.dicePool);\r\n            }\r\n            \r\n            // 뇌와 샷건 개수 업데이트\r\n            if (data.brains !== undefined && data.shotguns !== undefined) {\r\n              setCurrentBrains(data.brains);\r\n              setCurrentShotguns(data.shotguns);\r\n            }\r\n            \r\n            // 승자 확인\r\n            if (data.winner) {\r\n              setWinner(data.winner);\r\n            }\r\n          }, 2500); // 애니메이션 시간보다 약간 더 길게 설정\r\n        }\r\n      };\r\n      \r\n      // 턴 상태 업데이트 이벤트\r\n      const handleTurnStatusUpdated = (data) => {\r\n        console.log('턴 상태 업데이트:', data);\r\n        \r\n        // 내 턴이 아닐 때만 상태 업데이트\r\n        if (!isMyTurn) {\r\n          setCurrentBrains(data.currentBrains);\r\n          setCurrentShotguns(data.currentShotguns);\r\n        }\r\n        \r\n        // 주사위 풀 업데이트\r\n        setDicePool(data.dicePool || []);\r\n      };\r\n      \r\n      // 게임 상태 업데이트 이벤트\r\n      const handleGameStateUpdated = (gameState) => {\r\n        console.log('게임 상태 업데이트:', gameState);\r\n        \r\n        // 현재 턴이 변경되었는지 확인\r\n        const isMyTurnChanged = gameState.currentTurn !== currentTurn;\r\n        \r\n        if (isMyTurnChanged) {\r\n          console.log('턴 변경 감지, 주사위 풀 초기화');\r\n          \r\n          // 주사위 풀 초기화 - 서버에서 받은 값 사용 또는 기본값으로 초기화\r\n          const initialDicePool = gameState.dicePool || [\r\n            ...Array(3).fill('RED'),\r\n            ...Array(4).fill('YELLOW'),\r\n            ...Array(6).fill('GREEN')\r\n          ];\r\n          \r\n          // 서버에 주사위 풀 초기화 알림\r\n          const roomId = window.location.pathname.split('/')[2];\r\n          window.socket.emit('updateDicePool', {\r\n            roomId,\r\n            dicePool: initialDicePool\r\n          });\r\n          \r\n          setDicePool(initialDicePool);\r\n          setCurrentBrains(0);\r\n          setCurrentShotguns(0);\r\n          setRolledResults([]);\r\n          setSelectedDice([]);\r\n        } else {\r\n          // 주사위 풀 업데이트 - 서버 상태로 동기화\r\n          if (gameState.dicePool) {\r\n            console.log('주사위 풀 업데이트:', gameState.dicePool);\r\n            setDicePool(gameState.dicePool);\r\n          }\r\n        }\r\n        \r\n        // 현재 턴 업데이트\r\n        if (gameState.currentTurn !== undefined) {\r\n          // 턴이 변경되었으면 상태 초기화\r\n          setCurrentBrains(gameState.currentBrains || 0);\r\n          setCurrentShotguns(gameState.currentShotguns || 0);\r\n        }\r\n      };\r\n      \r\n      // 게임 종료 이벤트\r\n      const handleGameEnded = (data) => {\r\n        console.log('게임 종료:', data);\r\n        \r\n        setWinner(data.winner);\r\n      };\r\n      \r\n      // 게임 에러 이벤트\r\n      const handleGameError = (data) => {\r\n        console.error('게임 에러:', data.message);\r\n        \r\n        // 에러 처리\r\n        alert(`게임 에러: ${data.message}`);\r\n      };\r\n      \r\n      // 이벤트 리스너 등록\r\n      window.socket.on('gameStarted', handleGameStarted);\r\n      window.socket.on('diceSelected', handleDiceSelected);\r\n      window.socket.on('gameAction', handleGameAction);\r\n      window.socket.on('turnStatusUpdated', handleTurnStatusUpdated);\r\n      window.socket.on('gameStateUpdated', handleGameStateUpdated);\r\n      window.socket.on('gameEnded', handleGameEnded);\r\n      window.socket.on('gameError', handleGameError);\r\n      \r\n      // 클린업\r\n      return () => {\r\n        console.log('소켓 이벤트 리스너 제거');\r\n        window.socket.off('gameStarted', handleGameStarted);\r\n        window.socket.off('diceSelected', handleDiceSelected);\r\n        window.socket.off('gameAction', handleGameAction);\r\n        window.socket.off('turnStatusUpdated', handleTurnStatusUpdated);\r\n        window.socket.off('gameStateUpdated', handleGameStateUpdated);\r\n        window.socket.off('gameEnded', handleGameEnded);\r\n        window.socket.off('gameError', handleGameError);\r\n      };\r\n    }\r\n  }, [currentBrains, currentShotguns, isMyTurn, onTurnEnd]);\r\n\r\n  // 주사위 풀 상태 표시 컴포넌트\r\n  const DicePoolStatus = ({ dicePool }) => {\r\n    // 주사위 풀이 없으면 초기화\r\n    const pool = Array.isArray(dicePool) ? dicePool : [];\r\n    \r\n    // 주사위 색상별 개수 계산\r\n    const redCount = pool.filter(dice => dice === 'RED').length;\r\n    const yellowCount = pool.filter(dice => dice === 'YELLOW').length;\r\n    const greenCount = pool.filter(dice => dice === 'GREEN').length;\r\n    \r\n    return (\r\n      <div className=\"dice-pool-status mt-3\">\r\n        <h5>남은 주사위:</h5>\r\n        <div className=\"dice-pool-counts\">\r\n          <div className=\"dice-count red\">\r\n            <span className=\"dice-color-indicator red\"></span>\r\n            빨간색: {redCount}개\r\n          </div>\r\n          <div className=\"dice-count yellow\">\r\n            <span className=\"dice-color-indicator yellow\"></span>\r\n            노란색: {yellowCount}개\r\n          </div>\r\n          <div className=\"dice-count green\">\r\n            <span className=\"dice-color-indicator green\"></span>\r\n            초록색: {greenCount}개\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 점수판 렌더링\r\n  const renderScoreBoard = () => {\r\n    return (\r\n      <div className=\"score-board mb-4\">\r\n        <h4 className=\"text-center mb-3\">점수판</h4>\r\n        <div className=\"row\">\r\n          {players.map((player, index) => (\r\n            <div key={index} className={`col-md-${12 / players.length} mb-2`}>\r\n              <div className={`card ${index === currentTurn ? 'bg-light' : ''}`}>\r\n                <div className=\"card-body text-center\">\r\n                  <h5 className=\"card-title\">{player.nickname}</h5>\r\n                  <p className=\"card-text\">점수: {player.score || 0}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // 다른 플레이어의 턴일 때 화면\r\n  if (!isMyTurn) {\r\n    return (\r\n      <div className=\"zombie-dice\">\r\n        {renderScoreBoard()}\r\n        <div className=\"text-center mb-3\">\r\n          <h3>{players[currentTurn].nickname}님의 차례입니다</h3>\r\n        </div>\r\n        \r\n        <div className=\"current-status mb-3\">\r\n          <div className=\"d-flex justify-content-around\">\r\n            <div>획득한 뇌: {currentBrains}</div>\r\n            <div>샷건 횟수: {currentShotguns}/3</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"dice-area mb-3\">\r\n          {isRolling ? (\r\n            <div className=\"text-center\">\r\n              <p>주사위 굴리는 중...</p>\r\n            </div>\r\n          ) : (\r\n            rolledResults.length > 0 && (\r\n              rolledResults.map((result, index) => (\r\n                <Dice \r\n                  key={index}\r\n                  type={result.type}\r\n                  result={result.result}\r\n                  isRolling={isRolling}\r\n                />\r\n              ))\r\n            )\r\n          )}\r\n        </div>\r\n\r\n        <DicePoolStatus dicePool={dicePool} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 내 턴일 때 화면\r\n  return (\r\n    <div className=\"zombie-dice\">\r\n      {renderScoreBoard()}\r\n      \r\n      {winner ? (\r\n        <div className=\"alert alert-success text-center\">\r\n          <h3>🏆 {winner.nickname}님이 승리하셨습니다! 🏆</h3>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"text-center mb-3\">\r\n            <h3 className=\"my-turn-indicator\">당신의 차례입니다!</h3>\r\n          </div>\r\n          \r\n          <div className=\"current-status mb-3\">\r\n            <div className=\"d-flex justify-content-around\">\r\n              <div>획득한 뇌: {currentBrains}</div>\r\n              <div>샷건 횟수: {currentShotguns}/3</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"dice-area mb-3\">\r\n            {isRolling ? (\r\n              <div className=\"text-center\">\r\n                <p>주사위 굴리는 중...</p>\r\n              </div>\r\n            ) : (\r\n              rolledResults.length > 0 ? (\r\n                rolledResults.map((result, index) => (\r\n                  <Dice \r\n                    key={index}\r\n                    type={result.type}\r\n                    result={result.result}\r\n                    isRolling={isRolling}\r\n                  />\r\n                ))\r\n              ) : (\r\n                <button \r\n                  className=\"btn btn-primary\"\r\n                  onClick={handleRoll}\r\n                  disabled={isRolling}\r\n                >\r\n                  {selectedDice.length === 0 ? \"주사위 선택\" : \"주사위 굴리기\"}\r\n                </button>\r\n              )\r\n            )}\r\n          </div>\r\n\r\n          {rolledResults.length > 0 && !winner && !isRolling && (\r\n            <div className=\"controls\">\r\n              <button \r\n                className=\"btn btn-success me-2\"\r\n                onClick={handleContinue}\r\n                disabled={currentShotguns >= 3}\r\n              >\r\n                계속하기\r\n              </button>\r\n              <button \r\n                className=\"btn btn-warning\"\r\n                onClick={handleStop}\r\n              >\r\n                {currentShotguns >= 3 ? \"턴 종료 (0점)\" : \"멈추기\"}\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {currentShotguns >= 3 && (\r\n            <div className=\"alert alert-danger mt-3\">\r\n              <strong>총이 3개 이상!</strong> 이번 턴에 획득한 뇌를 모두 잃었습니다. 턴을 종료해주세요.\r\n            </div>\r\n          )}\r\n          \r\n          <DicePoolStatus dicePool={dicePool} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ZombieDice;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
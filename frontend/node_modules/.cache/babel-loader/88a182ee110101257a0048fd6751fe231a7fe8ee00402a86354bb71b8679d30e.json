{"ast":null,"code":"var _jsxFileName = \"F:\\\\Workspace\\\\Cursor\\\\game\\\\frontend\\\\src\\\\components\\\\games\\\\ZombieDice.js\",\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport redBrain from '../../assets/zombie-dice/faces/red-brain.png';\nimport redFootsteps from '../../assets/zombie-dice/faces/red-footsteps.png';\nimport redShotgun from '../../assets/zombie-dice/faces/red-shotgun.png';\nimport yellowBrain from '../../assets/zombie-dice/faces/yellow-brain.png';\nimport yellowFootsteps from '../../assets/zombie-dice/faces/yellow-footsteps.png';\nimport yellowShotgun from '../../assets/zombie-dice/faces/yellow-shotgun.png';\nimport greenBrain from '../../assets/zombie-dice/faces/green-brain.png';\nimport greenFootsteps from '../../assets/zombie-dice/faces/green-footsteps.png';\nimport greenShotgun from '../../assets/zombie-dice/faces/green-shotgun.png';\nimport '../styles/ZombieDice.css';\n\n// 승리 점수\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WINNING_SCORE = 13;\n\n// 주사위 면 정의\nconst DICE_FACES = {\n  RED: {\n    faces: [{\n      image: redBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: redFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 2면\n    {\n      image: redFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 3면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    },\n    // 4면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    },\n    // 5면\n    {\n      image: redShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  },\n  YELLOW: {\n    faces: [{\n      image: yellowBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: yellowBrain,\n      type: 'BRAIN'\n    },\n    // 2면\n    {\n      image: yellowFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 3면\n    {\n      image: yellowFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 4면\n    {\n      image: yellowShotgun,\n      type: 'SHOTGUN'\n    },\n    // 5면\n    {\n      image: yellowShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  },\n  GREEN: {\n    faces: [{\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 1면\n    {\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 2면\n    {\n      image: greenBrain,\n      type: 'BRAIN'\n    },\n    // 3면\n    {\n      image: greenFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 4면\n    {\n      image: greenFootsteps,\n      type: 'FOOTSTEPS'\n    },\n    // 5면\n    {\n      image: greenShotgun,\n      type: 'SHOTGUN'\n    } // 6면\n    ]\n  }\n};\nfunction ZombieDice({\n  players,\n  currentTurn,\n  onTurnEnd,\n  isMyTurn\n}) {\n  _s2();\n  var _s = $RefreshSig$();\n  const [dicePool, setDicePool] = useState([...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')]);\n  const [selectedDice, setSelectedDice] = useState([]);\n  const [rolledResults, setRolledResults] = useState([]);\n  const [currentBrains, setCurrentBrains] = useState(0);\n  const [currentShotguns, setCurrentShotguns] = useState(0);\n  const [keptDice, setKeptDice] = useState([]);\n  const [isRolling, setIsRolling] = useState(false);\n  const diceContainerRef = useRef(null);\n\n  // 주사위 3개 랜덤 선택\n  const pickDice = () => {\n    const newDice = [];\n    const tempPool = [...dicePool];\n    for (let i = 0; i < 3; i++) {\n      if (tempPool.length === 0) break;\n      const randomIndex = Math.floor(Math.random() * tempPool.length);\n      newDice.push(tempPool[randomIndex]);\n      tempPool.splice(randomIndex, 1);\n    }\n    setDicePool(tempPool);\n    setSelectedDice(newDice);\n  };\n\n  // 주사위 굴리기\n  const handleRoll = () => {\n    setIsRolling(true);\n\n    // 주사위 결과 계산은 애니메이션 후에 처리\n    setTimeout(() => {\n      const results = selectedDice.map(diceType => {\n        const randomIndex = Math.floor(Math.random() * 6);\n        const face = DICE_FACES[diceType].faces[randomIndex];\n        return {\n          type: diceType,\n          result: face.type,\n          face: face\n        };\n      });\n\n      // 소켓을 통해 결과 전송 (Room.js에서 처리)\n      if (window.socket) {\n        window.socket.emit('gameAction', {\n          action: 'rollDice',\n          results: results,\n          currentBrains,\n          currentShotguns\n        });\n      }\n\n      // 로컬에서도 결과 처리\n      setRolledResults(results);\n      processResults(results);\n      setIsRolling(false);\n    }, 2500); // 애니메이션 시간보다 약간 더 길게\n  };\n\n  // 결과 처리 함수 분리\n  const processResults = results => {\n    // 결과 계산\n    let newBrains = currentBrains;\n    let newShotguns = currentShotguns;\n    let newDicePool = [...dicePool];\n    results.forEach(({\n      result,\n      type\n    }) => {\n      if (result === 'BRAIN') newBrains++;\n      if (result === 'SHOTGUN') newShotguns++;\n      if (result === 'FOOTSTEPS') {\n        newDicePool.push(type);\n      }\n    });\n    setCurrentBrains(newBrains);\n    setCurrentShotguns(newShotguns);\n    setDicePool(newDicePool);\n    if (newShotguns >= 3) {\n      setTimeout(() => {\n        onTurnEnd(0);\n      }, 1000);\n    }\n  };\n\n  // 계속 진행\n  const handleContinue = () => {\n    setRolledResults([]);\n    // 도망간 주사위를 제외한 나머지는 보관\n    const keptDice = rolledResults.filter(result => result.result !== 'FOOTSTEPS').map(result => result.type);\n\n    // 새로운 주사위 선택\n    pickDice();\n  };\n\n  // 턴 종료\n  const handleStop = () => {\n    const finalScore = currentBrains;\n    // 주사위 풀 초기화\n    setDicePool([...Array(3).fill('RED'), ...Array(4).fill('YELLOW'), ...Array(6).fill('GREEN')]);\n    setCurrentBrains(0);\n    setCurrentShotguns(0);\n    setRolledResults([]);\n    setSelectedDice([]);\n    onTurnEnd(finalScore);\n  };\n\n  // 점수판 렌더링\n  const renderScoreBoard = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"score-board\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uD50C\\uB808\\uC774\\uC5B4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uC810\\uC218\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: index === currentTurn ? 'current-player' : '',\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: player.nickname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: player.score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, player.nickname, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n\n  // 승자가 있는지 확인\n  const winner = players.find(player => player.score >= WINNING_SCORE);\n  useEffect(() => {\n    if (isMyTurn) {\n      pickDice();\n    }\n  }, [isMyTurn]);\n\n  // Three.js를 사용한 주사위 컴포넌트\n  function Dice({\n    type,\n    result,\n    isRolling\n  }) {\n    _s();\n    const diceRef = useRef(null);\n    const animationRef = useRef(null);\n    useEffect(() => {\n      // 이전 캔버스 제거\n      while (diceRef.current && diceRef.current.firstChild) {\n        diceRef.current.removeChild(diceRef.current.firstChild);\n      }\n\n      // 씬 설정\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0xf0f0f0);\n\n      // 카메라 설정\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n      camera.position.z = 2;\n\n      // 렌더러 설정\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(150, 150);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      if (diceRef.current) {\n        diceRef.current.appendChild(renderer.domElement);\n      }\n\n      // 조명 추가\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(1, 1, 1);\n      scene.add(directionalLight);\n\n      // 텍스처 로더 생성\n      const textureLoader = new THREE.TextureLoader();\n\n      // 결과 타입에 따른 면 매핑\n      const resultIndex = DICE_FACES[type].faces.findIndex(face => face.type === result);\n\n      // 주사위 면 순서: +x, -x, +y, -y, +z, -z\n      // 각 면에 맞는 텍스처 매핑\n      const materials = [];\n\n      // 주사위 타입에 따른 면 이미지 설정\n      let brainImage, footstepsImage, shotgunImage;\n      switch (type) {\n        case 'RED':\n          brainImage = redBrain;\n          footstepsImage = redFootsteps;\n          shotgunImage = redShotgun;\n          break;\n        case 'YELLOW':\n          brainImage = yellowBrain;\n          footstepsImage = yellowFootsteps;\n          shotgunImage = yellowShotgun;\n          break;\n        case 'GREEN':\n          brainImage = greenBrain;\n          footstepsImage = greenFootsteps;\n          shotgunImage = greenShotgun;\n          break;\n      }\n\n      // 결과에 따라 위쪽 면 설정\n      let topFaceImage;\n      switch (result) {\n        case 'BRAIN':\n          topFaceImage = brainImage;\n          break;\n        case 'FOOTSTEPS':\n          topFaceImage = footstepsImage;\n          break;\n        case 'SHOTGUN':\n          topFaceImage = shotgunImage;\n          break;\n      }\n\n      // 각 면에 텍스처 적용\n      // 순서: +x, -x, +y, -y, +z(위), -z(아래)\n      const faceImages = [brainImage,\n      // +x\n      footstepsImage,\n      // -x\n      shotgunImage,\n      // +y\n      brainImage,\n      // -y\n      topFaceImage,\n      // +z (위쪽 면 - 결과에 따라 변경)\n      footstepsImage // -z\n      ];\n\n      // 각 면에 텍스처 적용\n      faceImages.forEach(image => {\n        const texture = textureLoader.load(image);\n        texture.colorSpace = THREE.SRGBColorSpace;\n        materials.push(new THREE.MeshStandardMaterial({\n          map: texture,\n          roughness: 0.3,\n          metalness: 0.2\n        }));\n      });\n\n      // 주사위 지오메트리 생성\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const dice = new THREE.Mesh(geometry, materials);\n      scene.add(dice);\n\n      // 초기 회전 설정\n      dice.rotation.set(Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI);\n\n      // 애니메이션 함수\n      const animate = () => {\n        animationRef.current = requestAnimationFrame(animate);\n        if (isRolling) {\n          // 굴러가는 애니메이션\n          dice.rotation.x += 0.1;\n          dice.rotation.y += 0.15;\n          dice.rotation.z += 0.05;\n        } else {\n          // 결과에 따른 회전 설정 - 항상 +z 면이 위로 오도록\n          const targetX = 0;\n          const targetY = 0;\n          const targetZ = 0;\n\n          // 부드러운 회전 애니메이션\n          dice.rotation.x += (targetX - dice.rotation.x) * 0.1;\n          dice.rotation.y += (targetY - dice.rotation.y) * 0.1;\n          dice.rotation.z += (targetZ - dice.rotation.z) * 0.1;\n        }\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // 클린업\n      return () => {\n        cancelAnimationFrame(animationRef.current);\n        if (diceRef.current && renderer.domElement) {\n          diceRef.current.removeChild(renderer.domElement);\n        }\n        geometry.dispose();\n        materials.forEach(material => material.dispose());\n        renderer.dispose();\n      };\n    }, [isRolling, result, type]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: diceRef,\n        className: \"dice-3d-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-result-label\",\n        children: [result === 'BRAIN' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"result-brain\",\n          children: \"\\uB1CC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 34\n        }, this), result === 'SHOTGUN' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"result-shotgun\",\n          children: \"\\uCD1D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 36\n        }, this), result === 'FOOTSTEPS' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"result-footsteps\",\n          children: \"\\uBC1C\\uC790\\uAD6D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 소켓 이벤트 리스너 추가\n  _s(Dice, \"F1LKHxQtkm8Is5hiJbdZTIYH4mI=\");\n  useEffect(() => {\n    if (window.socket) {\n      // 다른 플레이어의 주사위 굴리기 결과 수신\n      const handleGameAction = data => {\n        if (data.action === 'rollDice') {\n          setRolledResults(data.results);\n          setCurrentBrains(data.currentBrains);\n          setCurrentShotguns(data.currentShotguns);\n          setIsRolling(true);\n\n          // 애니메이션 후 isRolling 상태 변경\n          setTimeout(() => {\n            setIsRolling(false);\n          }, 2500);\n        }\n      };\n      window.socket.on('gameAction', handleGameAction);\n      return () => {\n        window.socket.off('gameAction', handleGameAction);\n      };\n    }\n  }, []);\n  if (!isMyTurn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"zombie-dice\",\n      children: [renderScoreBoard(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [players[currentTurn].nickname, \"\\uB2D8\\uC758 \\uCC28\\uB840\\uC785\\uB2C8\\uB2E4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), rolledResults.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-status mb-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-around\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"\\uD68D\\uB4DD\\uD55C \\uB1CC: \", currentBrains]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"\\uC0F7\\uAC74 \\uD69F\\uC218: \", currentShotguns, \"/3\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-area mb-3\",\n          children: rolledResults.map((result, index) => /*#__PURE__*/_jsxDEV(Dice, {\n            type: result.type,\n            result: result.result,\n            isRolling: isRolling\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"zombie-dice\",\n    children: [renderScoreBoard(), winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uD83C\\uDFC6 \", winner.nickname, \"\\uB2D8\\uC774 \\uC2B9\\uB9AC\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4! \\uD83C\\uDFC6\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-status mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-around\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uD68D\\uB4DD\\uD55C \\uB1CC: \", currentBrains]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"\\uC0F7\\uAC74 \\uD69F\\uC218: \", currentShotguns, \"/3\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-area mb-3\",\n        children: selectedDice.length > 0 && !rolledResults.length ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleRoll,\n          disabled: isRolling,\n          children: isRolling ? '주사위 굴리는 중...' : '주사위 굴리기'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 15\n        }, this) : rolledResults.map((result, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          type: result.type,\n          result: result.result,\n          isRolling: isRolling\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this), rolledResults.length > 0 && !winner && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success me-2\",\n          onClick: handleContinue,\n          disabled: currentShotguns >= 3,\n          children: \"\\uACC4\\uC18D\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-warning\",\n          onClick: handleStop,\n          children: \"\\uBA48\\uCD94\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 427,\n    columnNumber: 5\n  }, this);\n}\n_s2(ZombieDice, \"ewk0BW9zxKUC0bfwYoOscluVsOg=\");\n_c = ZombieDice;\nexport default ZombieDice;\nvar _c;\n$RefreshReg$(_c, \"ZombieDice\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","THREE","GLTFLoader","redBrain","redFootsteps","redShotgun","yellowBrain","yellowFootsteps","yellowShotgun","greenBrain","greenFootsteps","greenShotgun","jsxDEV","_jsxDEV","Fragment","_Fragment","WINNING_SCORE","DICE_FACES","RED","faces","image","type","YELLOW","GREEN","ZombieDice","players","currentTurn","onTurnEnd","isMyTurn","_s2","_s","$RefreshSig$","dicePool","setDicePool","Array","fill","selectedDice","setSelectedDice","rolledResults","setRolledResults","currentBrains","setCurrentBrains","currentShotguns","setCurrentShotguns","keptDice","setKeptDice","isRolling","setIsRolling","diceContainerRef","pickDice","newDice","tempPool","i","length","randomIndex","Math","floor","random","push","splice","handleRoll","setTimeout","results","map","diceType","face","result","window","socket","emit","action","processResults","newBrains","newShotguns","newDicePool","forEach","handleContinue","filter","handleStop","finalScore","renderScoreBoard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","player","index","nickname","score","winner","find","Dice","diceRef","animationRef","current","firstChild","removeChild","scene","Scene","background","Color","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","textureLoader","TextureLoader","resultIndex","findIndex","materials","brainImage","footstepsImage","shotgunImage","topFaceImage","faceImages","texture","load","colorSpace","SRGBColorSpace","MeshStandardMaterial","roughness","metalness","geometry","BoxGeometry","dice","Mesh","rotation","PI","animate","requestAnimationFrame","x","y","targetX","targetY","targetZ","render","cancelAnimationFrame","dispose","material","ref","handleGameAction","data","on","off","onClick","disabled","_c","$RefreshReg$"],"sources":["F:/Workspace/Cursor/game/frontend/src/components/games/ZombieDice.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport redBrain from '../../assets/zombie-dice/faces/red-brain.png';\r\nimport redFootsteps from '../../assets/zombie-dice/faces/red-footsteps.png';\r\nimport redShotgun from '../../assets/zombie-dice/faces/red-shotgun.png';\r\nimport yellowBrain from '../../assets/zombie-dice/faces/yellow-brain.png';\r\nimport yellowFootsteps from '../../assets/zombie-dice/faces/yellow-footsteps.png';\r\nimport yellowShotgun from '../../assets/zombie-dice/faces/yellow-shotgun.png';\r\nimport greenBrain from '../../assets/zombie-dice/faces/green-brain.png';\r\nimport greenFootsteps from '../../assets/zombie-dice/faces/green-footsteps.png';\r\nimport greenShotgun from '../../assets/zombie-dice/faces/green-shotgun.png';\r\nimport '../styles/ZombieDice.css';\r\n\r\n// 승리 점수\r\nconst WINNING_SCORE = 13;\r\n\r\n// 주사위 면 정의\r\nconst DICE_FACES = {\r\n  RED: {\r\n    faces: [\r\n      { image: redBrain, type: 'BRAIN' },      // 1면\r\n      { image: redFootsteps, type: 'FOOTSTEPS' }, // 2면\r\n      { image: redFootsteps, type: 'FOOTSTEPS' }, // 3면\r\n      { image: redShotgun, type: 'SHOTGUN' },   // 4면\r\n      { image: redShotgun, type: 'SHOTGUN' },   // 5면\r\n      { image: redShotgun, type: 'SHOTGUN' }    // 6면\r\n    ]\r\n  },\r\n  YELLOW: {\r\n    faces: [\r\n      { image: yellowBrain, type: 'BRAIN' },     // 1면\r\n      { image: yellowBrain, type: 'BRAIN' },     // 2면\r\n      { image: yellowFootsteps, type: 'FOOTSTEPS' }, // 3면\r\n      { image: yellowFootsteps, type: 'FOOTSTEPS' }, // 4면\r\n      { image: yellowShotgun, type: 'SHOTGUN' },  // 5면\r\n      { image: yellowShotgun, type: 'SHOTGUN' }   // 6면\r\n    ]\r\n  },\r\n  GREEN: {\r\n    faces: [\r\n      { image: greenBrain, type: 'BRAIN' },     // 1면\r\n      { image: greenBrain, type: 'BRAIN' },     // 2면\r\n      { image: greenBrain, type: 'BRAIN' },     // 3면\r\n      { image: greenFootsteps, type: 'FOOTSTEPS' }, // 4면\r\n      { image: greenFootsteps, type: 'FOOTSTEPS' }, // 5면\r\n      { image: greenShotgun, type: 'SHOTGUN' }   // 6면\r\n    ]\r\n  }\r\n};\r\n\r\nfunction ZombieDice({ players, currentTurn, onTurnEnd, isMyTurn }) {\r\n  const [dicePool, setDicePool] = useState([\r\n    ...Array(3).fill('RED'),\r\n    ...Array(4).fill('YELLOW'),\r\n    ...Array(6).fill('GREEN')\r\n  ]);\r\n  const [selectedDice, setSelectedDice] = useState([]);\r\n  const [rolledResults, setRolledResults] = useState([]);\r\n  const [currentBrains, setCurrentBrains] = useState(0);\r\n  const [currentShotguns, setCurrentShotguns] = useState(0);\r\n  const [keptDice, setKeptDice] = useState([]);\r\n  const [isRolling, setIsRolling] = useState(false);\r\n  const diceContainerRef = useRef(null);\r\n\r\n  // 주사위 3개 랜덤 선택\r\n  const pickDice = () => {\r\n    const newDice = [];\r\n    const tempPool = [...dicePool];\r\n    \r\n    for (let i = 0; i < 3; i++) {\r\n      if (tempPool.length === 0) break;\r\n      const randomIndex = Math.floor(Math.random() * tempPool.length);\r\n      newDice.push(tempPool[randomIndex]);\r\n      tempPool.splice(randomIndex, 1);\r\n    }\r\n    \r\n    setDicePool(tempPool);\r\n    setSelectedDice(newDice);\r\n  };\r\n\r\n  // 주사위 굴리기\r\n  const handleRoll = () => {\r\n    setIsRolling(true);\r\n    \r\n    // 주사위 결과 계산은 애니메이션 후에 처리\r\n    setTimeout(() => {\r\n      const results = selectedDice.map(diceType => {\r\n        const randomIndex = Math.floor(Math.random() * 6);\r\n        const face = DICE_FACES[diceType].faces[randomIndex];\r\n        return {\r\n          type: diceType,\r\n          result: face.type,\r\n          face: face\r\n        };\r\n      });\r\n      \r\n      // 소켓을 통해 결과 전송 (Room.js에서 처리)\r\n      if (window.socket) {\r\n        window.socket.emit('gameAction', {\r\n          action: 'rollDice',\r\n          results: results,\r\n          currentBrains,\r\n          currentShotguns\r\n        });\r\n      }\r\n      \r\n      // 로컬에서도 결과 처리\r\n      setRolledResults(results);\r\n      processResults(results);\r\n      setIsRolling(false);\r\n    }, 2500); // 애니메이션 시간보다 약간 더 길게\r\n  };\r\n\r\n  // 결과 처리 함수 분리\r\n  const processResults = (results) => {\r\n    // 결과 계산\r\n    let newBrains = currentBrains;\r\n    let newShotguns = currentShotguns;\r\n    let newDicePool = [...dicePool];\r\n    \r\n    results.forEach(({ result, type }) => {\r\n      if (result === 'BRAIN') newBrains++;\r\n      if (result === 'SHOTGUN') newShotguns++;\r\n      if (result === 'FOOTSTEPS') {\r\n        newDicePool.push(type);\r\n      }\r\n    });\r\n\r\n    setCurrentBrains(newBrains);\r\n    setCurrentShotguns(newShotguns);\r\n    setDicePool(newDicePool);\r\n\r\n    if (newShotguns >= 3) {\r\n      setTimeout(() => {\r\n        onTurnEnd(0);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  // 계속 진행\r\n  const handleContinue = () => {\r\n    setRolledResults([]);\r\n    // 도망간 주사위를 제외한 나머지는 보관\r\n    const keptDice = rolledResults\r\n      .filter(result => result.result !== 'FOOTSTEPS')\r\n      .map(result => result.type);\r\n    \r\n    // 새로운 주사위 선택\r\n    pickDice();\r\n  };\r\n\r\n  // 턴 종료\r\n  const handleStop = () => {\r\n    const finalScore = currentBrains;\r\n    // 주사위 풀 초기화\r\n    setDicePool([\r\n      ...Array(3).fill('RED'),\r\n      ...Array(4).fill('YELLOW'),\r\n      ...Array(6).fill('GREEN')\r\n    ]);\r\n    setCurrentBrains(0);\r\n    setCurrentShotguns(0);\r\n    setRolledResults([]);\r\n    setSelectedDice([]);\r\n    onTurnEnd(finalScore);\r\n  };\r\n\r\n  // 점수판 렌더링\r\n  const renderScoreBoard = () => (\r\n    <div className=\"score-board\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>플레이어</th>\r\n            <th>점수</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {players.map((player, index) => (\r\n            <tr \r\n              key={player.nickname}\r\n              className={index === currentTurn ? 'current-player' : ''}\r\n            >\r\n              <td>{player.nickname}</td>\r\n              <td>{player.score}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n\r\n  // 승자가 있는지 확인\r\n  const winner = players.find(player => player.score >= WINNING_SCORE);\r\n\r\n  useEffect(() => {\r\n    if (isMyTurn) {\r\n      pickDice();\r\n    }\r\n  }, [isMyTurn]);\r\n\r\n  // Three.js를 사용한 주사위 컴포넌트\r\n  function Dice({ type, result, isRolling }) {\r\n    const diceRef = useRef(null);\r\n    const animationRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n      // 이전 캔버스 제거\r\n      while (diceRef.current && diceRef.current.firstChild) {\r\n        diceRef.current.removeChild(diceRef.current.firstChild);\r\n      }\r\n\r\n      // 씬 설정\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0xf0f0f0);\r\n      \r\n      // 카메라 설정\r\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n      camera.position.z = 2;\r\n      \r\n      // 렌더러 설정\r\n      const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n      renderer.setSize(150, 150);\r\n      renderer.setPixelRatio(window.devicePixelRatio);\r\n      if (diceRef.current) {\r\n        diceRef.current.appendChild(renderer.domElement);\r\n      }\r\n\r\n      // 조명 추가\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n      scene.add(ambientLight);\r\n      \r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n      directionalLight.position.set(1, 1, 1);\r\n      scene.add(directionalLight);\r\n\r\n      // 텍스처 로더 생성\r\n      const textureLoader = new THREE.TextureLoader();\r\n      \r\n      // 결과 타입에 따른 면 매핑\r\n      const resultIndex = DICE_FACES[type].faces.findIndex(face => face.type === result);\r\n      \r\n      // 주사위 면 순서: +x, -x, +y, -y, +z, -z\r\n      // 각 면에 맞는 텍스처 매핑\r\n      const materials = [];\r\n      \r\n      // 주사위 타입에 따른 면 이미지 설정\r\n      let brainImage, footstepsImage, shotgunImage;\r\n      \r\n      switch(type) {\r\n        case 'RED':\r\n          brainImage = redBrain;\r\n          footstepsImage = redFootsteps;\r\n          shotgunImage = redShotgun;\r\n          break;\r\n        case 'YELLOW':\r\n          brainImage = yellowBrain;\r\n          footstepsImage = yellowFootsteps;\r\n          shotgunImage = yellowShotgun;\r\n          break;\r\n        case 'GREEN':\r\n          brainImage = greenBrain;\r\n          footstepsImage = greenFootsteps;\r\n          shotgunImage = greenShotgun;\r\n          break;\r\n      }\r\n      \r\n      // 결과에 따라 위쪽 면 설정\r\n      let topFaceImage;\r\n      switch(result) {\r\n        case 'BRAIN':\r\n          topFaceImage = brainImage;\r\n          break;\r\n        case 'FOOTSTEPS':\r\n          topFaceImage = footstepsImage;\r\n          break;\r\n        case 'SHOTGUN':\r\n          topFaceImage = shotgunImage;\r\n          break;\r\n      }\r\n      \r\n      // 각 면에 텍스처 적용\r\n      // 순서: +x, -x, +y, -y, +z(위), -z(아래)\r\n      const faceImages = [\r\n        brainImage,       // +x\r\n        footstepsImage,   // -x\r\n        shotgunImage,     // +y\r\n        brainImage,       // -y\r\n        topFaceImage,     // +z (위쪽 면 - 결과에 따라 변경)\r\n        footstepsImage    // -z\r\n      ];\r\n      \r\n      // 각 면에 텍스처 적용\r\n      faceImages.forEach(image => {\r\n        const texture = textureLoader.load(image);\r\n        texture.colorSpace = THREE.SRGBColorSpace;\r\n        materials.push(new THREE.MeshStandardMaterial({ \r\n          map: texture,\r\n          roughness: 0.3,\r\n          metalness: 0.2\r\n        }));\r\n      });\r\n      \r\n      // 주사위 지오메트리 생성\r\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n      const dice = new THREE.Mesh(geometry, materials);\r\n      scene.add(dice);\r\n      \r\n      // 초기 회전 설정\r\n      dice.rotation.set(\r\n        Math.random() * Math.PI,\r\n        Math.random() * Math.PI,\r\n        Math.random() * Math.PI\r\n      );\r\n      \r\n      // 애니메이션 함수\r\n      const animate = () => {\r\n        animationRef.current = requestAnimationFrame(animate);\r\n        \r\n        if (isRolling) {\r\n          // 굴러가는 애니메이션\r\n          dice.rotation.x += 0.1;\r\n          dice.rotation.y += 0.15;\r\n          dice.rotation.z += 0.05;\r\n        } else {\r\n          // 결과에 따른 회전 설정 - 항상 +z 면이 위로 오도록\r\n          const targetX = 0;\r\n          const targetY = 0;\r\n          const targetZ = 0;\r\n          \r\n          // 부드러운 회전 애니메이션\r\n          dice.rotation.x += (targetX - dice.rotation.x) * 0.1;\r\n          dice.rotation.y += (targetY - dice.rotation.y) * 0.1;\r\n          dice.rotation.z += (targetZ - dice.rotation.z) * 0.1;\r\n        }\r\n        \r\n        renderer.render(scene, camera);\r\n      };\r\n      \r\n      animate();\r\n      \r\n      // 클린업\r\n      return () => {\r\n        cancelAnimationFrame(animationRef.current);\r\n        if (diceRef.current && renderer.domElement) {\r\n          diceRef.current.removeChild(renderer.domElement);\r\n        }\r\n        geometry.dispose();\r\n        materials.forEach(material => material.dispose());\r\n        renderer.dispose();\r\n      };\r\n    }, [isRolling, result, type]);\r\n    \r\n    return (\r\n      <div className=\"dice-result-container\">\r\n        <div ref={diceRef} className=\"dice-3d-container\"></div>\r\n        <div className=\"dice-result-label\">\r\n          {result === 'BRAIN' && <span className=\"result-brain\">뇌</span>}\r\n          {result === 'SHOTGUN' && <span className=\"result-shotgun\">총</span>}\r\n          {result === 'FOOTSTEPS' && <span className=\"result-footsteps\">발자국</span>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 소켓 이벤트 리스너 추가\r\n  useEffect(() => {\r\n    if (window.socket) {\r\n      // 다른 플레이어의 주사위 굴리기 결과 수신\r\n      const handleGameAction = (data) => {\r\n        if (data.action === 'rollDice') {\r\n          setRolledResults(data.results);\r\n          setCurrentBrains(data.currentBrains);\r\n          setCurrentShotguns(data.currentShotguns);\r\n          setIsRolling(true);\r\n          \r\n          // 애니메이션 후 isRolling 상태 변경\r\n          setTimeout(() => {\r\n            setIsRolling(false);\r\n          }, 2500);\r\n        }\r\n      };\r\n      \r\n      window.socket.on('gameAction', handleGameAction);\r\n      \r\n      return () => {\r\n        window.socket.off('gameAction', handleGameAction);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  if (!isMyTurn) {\r\n    return (\r\n      <div className=\"zombie-dice\">\r\n        {renderScoreBoard()}\r\n        <div className=\"text-center mb-3\">\r\n          <h3>{players[currentTurn].nickname}님의 차례입니다</h3>\r\n        </div>\r\n        \r\n        {rolledResults.length > 0 && (\r\n          <>\r\n            <div className=\"current-status mb-3\">\r\n              <div className=\"d-flex justify-content-around\">\r\n                <div>획득한 뇌: {currentBrains}</div>\r\n                <div>샷건 횟수: {currentShotguns}/3</div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"dice-area mb-3\">\r\n              {rolledResults.map((result, index) => (\r\n                <Dice \r\n                  key={index}\r\n                  type={result.type}\r\n                  result={result.result}\r\n                  isRolling={isRolling}\r\n                />\r\n              ))}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"zombie-dice\">\r\n      {renderScoreBoard()}\r\n      \r\n      {winner ? (\r\n        <div className=\"alert alert-success text-center\">\r\n          <h3>🏆 {winner.nickname}님이 승리하셨습니다! 🏆</h3>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"current-status mb-3\">\r\n            <div className=\"d-flex justify-content-around\">\r\n              <div>획득한 뇌: {currentBrains}</div>\r\n              <div>샷건 횟수: {currentShotguns}/3</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"dice-area mb-3\">\r\n            {selectedDice.length > 0 && !rolledResults.length ? (\r\n              <button \r\n                className=\"btn btn-primary\"\r\n                onClick={handleRoll}\r\n                disabled={isRolling}\r\n              >\r\n                {isRolling ? '주사위 굴리는 중...' : '주사위 굴리기'}\r\n              </button>\r\n            ) : (\r\n              rolledResults.map((result, index) => (\r\n                <Dice \r\n                  key={index}\r\n                  type={result.type}\r\n                  result={result.result}\r\n                  isRolling={isRolling}\r\n                />\r\n              ))\r\n            )}\r\n          </div>\r\n\r\n          {rolledResults.length > 0 && !winner && (\r\n            <div className=\"controls\">\r\n              <button \r\n                className=\"btn btn-success me-2\"\r\n                onClick={handleContinue}\r\n                disabled={currentShotguns >= 3}\r\n              >\r\n                계속하기\r\n              </button>\r\n              <button \r\n                className=\"btn btn-warning\"\r\n                onClick={handleStop}\r\n              >\r\n                멈추기\r\n              </button>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ZombieDice;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}